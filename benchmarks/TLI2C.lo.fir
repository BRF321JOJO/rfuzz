circuit TLI2C :
  module TLI2C :
    input clock : Clock
    input reset : UInt<1>
    output auto_int_out_0 : UInt<1>
    output auto_in_a_ready : UInt<1>
    input auto_in_a_valid : UInt<1>
    input auto_in_a_bits_opcode : UInt<3>
    input auto_in_a_bits_param : UInt<3>
    input auto_in_a_bits_size : UInt<2>
    input auto_in_a_bits_source : UInt<7>
    input auto_in_a_bits_address : UInt<29>
    input auto_in_a_bits_mask : UInt<4>
    input auto_in_a_bits_data : UInt<32>
    input auto_in_b_ready : UInt<1>
    output auto_in_b_valid : UInt<1>
    output auto_in_b_bits_opcode : UInt<3>
    output auto_in_b_bits_param : UInt<2>
    output auto_in_b_bits_size : UInt<2>
    output auto_in_b_bits_source : UInt<7>
    output auto_in_b_bits_address : UInt<29>
    output auto_in_b_bits_mask : UInt<4>
    output auto_in_b_bits_data : UInt<32>
    output auto_in_c_ready : UInt<1>
    input auto_in_c_valid : UInt<1>
    input auto_in_c_bits_opcode : UInt<3>
    input auto_in_c_bits_param : UInt<3>
    input auto_in_c_bits_size : UInt<2>
    input auto_in_c_bits_source : UInt<7>
    input auto_in_c_bits_address : UInt<29>
    input auto_in_c_bits_data : UInt<32>
    input auto_in_c_bits_error : UInt<1>
    input auto_in_d_ready : UInt<1>
    output auto_in_d_valid : UInt<1>
    output auto_in_d_bits_opcode : UInt<3>
    output auto_in_d_bits_param : UInt<2>
    output auto_in_d_bits_size : UInt<2>
    output auto_in_d_bits_source : UInt<7>
    output auto_in_d_bits_sink : UInt<1>
    output auto_in_d_bits_data : UInt<32>
    output auto_in_d_bits_error : UInt<1>
    output auto_in_e_ready : UInt<1>
    input auto_in_e_valid : UInt<1>
    input auto_in_e_bits_sink : UInt<1>
    input io_port_scl_in : UInt<1>
    output io_port_scl_out : UInt<1>
    output io_port_scl_oe : UInt<1>
    input io_port_sda_in : UInt<1>
    output io_port_sda_out : UInt<1>
    output io_port_sda_oe : UInt<1>

    inst TLMonitor of TLMonitor_72 @[Nodes.scala 25:25]
    node _T_184 = UInt<16>("hffff")
    node _T_185 = bits(_T_184, 7, 0) @[I2C.scala 109:63]
    node _T_186 = bits(_T_184, 15, 8) @[I2C.scala 109:63]
    reg prescaler_hi : UInt<8>, clock with :
      reset => (UInt<1>("h0"), prescaler_hi) @[I2C.scala 109:25]
    reg prescaler_lo : UInt<8>, clock with :
      reset => (UInt<1>("h0"), prescaler_lo) @[I2C.scala 109:25]
    node _T_193 = pad(UInt<1>("h0"), 8)
    node _T_194 = bits(_T_193, 5, 0) @[I2C.scala 110:61]
    node _T_195 = bits(_T_193, 6, 6) @[I2C.scala 110:61]
    node _T_196 = bits(_T_193, 7, 7) @[I2C.scala 110:61]
    reg control_coreEn : UInt<1>, clock with :
      reset => (UInt<1>("h0"), control_coreEn) @[I2C.scala 110:25]
    reg control_intEn : UInt<1>, clock with :
      reset => (UInt<1>("h0"), control_intEn) @[I2C.scala 110:25]
    reg control_reserved : UInt<6>, clock with :
      reset => (UInt<1>("h0"), control_reserved) @[I2C.scala 110:25]
    reg transmitData : UInt<8>, clock with :
      reset => (UInt<1>("h0"), transmitData) @[I2C.scala 111:25]
    reg receivedData : UInt<8>, clock with :
      reset => (UInt<1>("h0"), receivedData) @[I2C.scala 112:25]
    node _T_207 = pad(UInt<1>("h0"), 8)
    node _T_208 = bits(_T_207, 0, 0) @[I2C.scala 113:61]
    node _T_209 = bits(_T_207, 2, 1) @[I2C.scala 113:61]
    node _T_210 = bits(_T_207, 3, 3) @[I2C.scala 113:61]
    node _T_211 = bits(_T_207, 4, 4) @[I2C.scala 113:61]
    node _T_212 = bits(_T_207, 5, 5) @[I2C.scala 113:61]
    node _T_213 = bits(_T_207, 6, 6) @[I2C.scala 113:61]
    node _T_214 = bits(_T_207, 7, 7) @[I2C.scala 113:61]
    reg cmd_start : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cmd_start) @[I2C.scala 113:25]
    reg cmd_stop : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cmd_stop) @[I2C.scala 113:25]
    reg cmd_read : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cmd_read) @[I2C.scala 113:25]
    reg cmd_write : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cmd_write) @[I2C.scala 113:25]
    reg cmd_ack : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cmd_ack) @[I2C.scala 113:25]
    reg cmd_reserved : UInt<2>, clock with :
      reset => (UInt<1>("h0"), cmd_reserved) @[I2C.scala 113:25]
    reg cmd_irqAck : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cmd_irqAck) @[I2C.scala 113:25]
    node _T_221 = pad(UInt<1>("h0"), 8)
    node _T_222 = bits(_T_221, 0, 0) @[I2C.scala 114:60]
    node _T_223 = bits(_T_221, 1, 1) @[I2C.scala 114:60]
    node _T_224 = bits(_T_221, 4, 2) @[I2C.scala 114:60]
    node _T_225 = bits(_T_221, 5, 5) @[I2C.scala 114:60]
    node _T_226 = bits(_T_221, 6, 6) @[I2C.scala 114:60]
    node _T_227 = bits(_T_221, 7, 7) @[I2C.scala 114:60]
    reg status_receivedAck : UInt<1>, clock with :
      reset => (UInt<1>("h0"), status_receivedAck) @[I2C.scala 114:25]
    reg status_busy : UInt<1>, clock with :
      reset => (UInt<1>("h0"), status_busy) @[I2C.scala 114:25]
    reg status_arbLost : UInt<1>, clock with :
      reset => (UInt<1>("h0"), status_arbLost) @[I2C.scala 114:25]
    reg status_reserved : UInt<3>, clock with :
      reset => (UInt<1>("h0"), status_reserved) @[I2C.scala 114:25]
    reg status_transferInProgress : UInt<1>, clock with :
      reset => (UInt<1>("h0"), status_transferInProgress) @[I2C.scala 114:25]
    reg status_irqFlag : UInt<1>, clock with :
      reset => (UInt<1>("h0"), status_irqFlag) @[I2C.scala 114:25]
    reg filterCnt : UInt<14>, clock with :
      reset => (UInt<1>("h0"), filterCnt) @[I2C.scala 123:22]
    node _T_234 = eq(control_coreEn, UInt<1>("h0")) @[I2C.scala 124:10]
    node _T_237 = neq(filterCnt, UInt<1>("h0")) @[I2C.scala 126:28]
    node _T_239 = eq(_T_237, UInt<1>("h0")) @[I2C.scala 126:16]
    node _T_240 = cat(prescaler_hi, prescaler_lo) @[Cat.scala 30:58]
    node _T_241 = shr(_T_240, 2) @[I2C.scala 127:50]
    node _T_243 = sub(filterCnt, UInt<1>("h1")) @[I2C.scala 129:28]
    node _T_244 = asUInt(_T_243) @[I2C.scala 129:28]
    node _T_245 = tail(_T_244, 1) @[I2C.scala 129:28]
    node _GEN_0 = mux(_T_239, _T_241, _T_245) @[I2C.scala 126:34 127:15 129:15]
    node _GEN_1 = mux(_T_234, UInt<1>("h0"), _GEN_0) @[I2C.scala 124:28 125:15]
    reg fSCL : UInt<3>, clock with :
      reset => (UInt<1>("h0"), fSCL) @[I2C.scala 132:22]
    reg fSDA : UInt<3>, clock with :
      reset => (UInt<1>("h0"), fSDA) @[I2C.scala 133:22]
    node _T_251 = neq(filterCnt, UInt<1>("h0")) @[I2C.scala 134:21]
    node _T_253 = eq(_T_251, UInt<1>("h0")) @[I2C.scala 134:9]
    node _T_254 = cat(fSCL, io_port_scl_in) @[Cat.scala 30:58]
    node _T_255 = cat(fSDA, io_port_sda_in) @[Cat.scala 30:58]
    node _GEN_2 = mux(_T_253, _T_254, fSCL) @[I2C.scala 134:27 135:10 132:22]
    node _GEN_3 = mux(_T_253, _T_255, fSDA) @[I2C.scala 134:27 136:10 133:22]
    node _T_257 = bits(fSCL, 0, 0) @[Misc.scala 208:40]
    node _T_258 = bits(fSCL, 1, 1) @[Misc.scala 208:40]
    node _T_259 = bits(fSCL, 2, 2) @[Misc.scala 208:40]
    node _T_260 = and(_T_257, _T_258) @[Misc.scala 202:48]
    node _T_261 = and(_T_257, _T_259) @[Misc.scala 202:48]
    node _T_262 = or(_T_260, _T_261) @[Misc.scala 203:22]
    node _T_263 = and(_T_258, _T_259) @[Misc.scala 202:48]
    node _T_264 = or(_T_262, _T_263) @[Misc.scala 203:22]
    reg sSCL : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sSCL) @[I2C.scala 139:22]
    node _T_267 = bits(fSDA, 0, 0) @[Misc.scala 208:40]
    node _T_268 = bits(fSDA, 1, 1) @[Misc.scala 208:40]
    node _T_269 = bits(fSDA, 2, 2) @[Misc.scala 208:40]
    node _T_270 = and(_T_267, _T_268) @[Misc.scala 202:48]
    node _T_271 = and(_T_267, _T_269) @[Misc.scala 202:48]
    node _T_272 = or(_T_270, _T_271) @[Misc.scala 203:22]
    node _T_273 = and(_T_268, _T_269) @[Misc.scala 202:48]
    node _T_274 = or(_T_272, _T_273) @[Misc.scala 203:22]
    reg sSDA : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sSDA) @[I2C.scala 140:22]
    reg dSCL : UInt<1>, clock with :
      reset => (UInt<1>("h0"), dSCL) @[I2C.scala 142:22]
    reg dSDA : UInt<1>, clock with :
      reset => (UInt<1>("h0"), dSDA) @[I2C.scala 143:22]
    reg dSCLOen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), dSCLOen) @[I2C.scala 145:22]
    node _T_283 = eq(sSDA, UInt<1>("h0")) @[I2C.scala 149:46]
    node _T_284 = and(_T_283, dSDA) @[I2C.scala 149:52]
    node _T_285 = and(_T_284, sSCL) @[I2C.scala 149:61]
    reg startCond : UInt<1>, clock with :
      reset => (UInt<1>("h0"), startCond) @[I2C.scala 149:22]
    node _T_289 = eq(dSDA, UInt<1>("h0")) @[I2C.scala 150:55]
    node _T_290 = and(sSDA, _T_289) @[I2C.scala 150:52]
    node _T_291 = and(_T_290, sSCL) @[I2C.scala 150:61]
    reg stopCond : UInt<1>, clock with :
      reset => (UInt<1>("h0"), stopCond) @[I2C.scala 150:22]
    node _T_294 = eq(sSCL, UInt<1>("h0")) @[I2C.scala 154:27]
    node _T_295 = and(dSCL, _T_294) @[I2C.scala 154:24]
    node sclSync = and(_T_295, io_port_scl_oe) @[I2C.scala 154:33]
    reg slaveWait : UInt<1>, clock with :
      reset => (UInt<1>("h0"), slaveWait) @[I2C.scala 158:22]
    node _T_299 = eq(dSCLOen, UInt<1>("h0")) @[I2C.scala 159:35]
    node _T_300 = and(io_port_scl_oe, _T_299) @[I2C.scala 159:32]
    node _T_302 = eq(sSCL, UInt<1>("h0")) @[I2C.scala 159:47]
    node _T_303 = and(_T_300, _T_302) @[I2C.scala 159:44]
    node _T_305 = eq(sSCL, UInt<1>("h0")) @[I2C.scala 159:71]
    node _T_306 = and(slaveWait, _T_305) @[I2C.scala 159:68]
    node _T_307 = or(_T_303, _T_306) @[I2C.scala 159:54]
    reg clkEn : UInt<1>, clock with :
      reset => (UInt<1>("h0"), clkEn) @[I2C.scala 161:22]
    reg cnt : UInt<16>, clock with :
      reset => (UInt<1>("h0"), cnt) @[I2C.scala 162:22]
    node _T_313 = neq(cnt, UInt<1>("h0")) @[I2C.scala 165:15]
    node _T_315 = eq(_T_313, UInt<1>("h0")) @[I2C.scala 165:9]
    node _T_317 = eq(control_coreEn, UInt<1>("h0")) @[I2C.scala 165:23]
    node _T_318 = or(_T_315, _T_317) @[I2C.scala 165:20]
    node _T_319 = or(_T_318, sclSync) @[I2C.scala 165:39]
    node _T_320 = cat(prescaler_hi, prescaler_lo) @[Cat.scala 30:58]
    node _T_324 = sub(cnt, UInt<1>("h1")) @[I2C.scala 173:18]
    node _T_325 = asUInt(_T_324) @[I2C.scala 173:18]
    node _T_326 = tail(_T_325, 1) @[I2C.scala 173:18]
    node _GEN_4 = mux(slaveWait, UInt<1>("h0"), UInt<1>("h0")) @[I2C.scala 169:25 170:11 174:11]
    node _GEN_5 = mux(slaveWait, cnt, _T_326) @[I2C.scala 162:22 169:25 173:11]
    node _GEN_6 = mux(_T_319, _T_320, _GEN_5) @[I2C.scala 165:52 166:11]
    node _GEN_7 = mux(_T_319, UInt<1>("h1"), _GEN_4) @[I2C.scala 165:52 167:11]
    reg sclOen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sclOen) @[I2C.scala 177:23]
    node _T_331 = eq(sclOen, UInt<1>("h0")) @[I2C.scala 178:21]
    reg sdaOen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sdaOen) @[I2C.scala 180:23]
    node _T_335 = eq(sdaOen, UInt<1>("h0")) @[I2C.scala 181:21]
    reg sdaChk : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sdaChk) @[I2C.scala 183:23]
    reg transmitBit : UInt<1>, clock with :
      reset => (UInt<1>("h0"), transmitBit) @[I2C.scala 185:24]
    reg receivedBit : UInt<1>, clock with :
      reset => (UInt<1>("h0"), receivedBit) @[I2C.scala 186:24]
    node _T_342 = eq(dSCL, UInt<1>("h0")) @[I2C.scala 187:17]
    node _T_343 = and(sSCL, _T_342) @[I2C.scala 187:14]
    node _GEN_8 = mux(_T_343, sSDA, receivedBit) @[I2C.scala 187:24 188:17 186:24]
    reg bitCmd : UInt<4>, clock with :
      reset => (UInt<1>("h0"), bitCmd) @[I2C.scala 191:24]
    reg bitCmdStop : UInt<1>, clock with :
      reset => (UInt<1>("h0"), bitCmdStop) @[I2C.scala 192:24]
    node _T_348 = eq(bitCmd, UInt<2>("h2")) @[I2C.scala 194:26]
    node _GEN_9 = mux(clkEn, _T_348, bitCmdStop) @[I2C.scala 193:16 194:16 192:24]
    reg bitCmdAck : UInt<1>, clock with :
      reset => (UInt<1>("h0"), bitCmdAck) @[I2C.scala 196:24]
    reg bitState : UInt<5>, clock with :
      reset => (UInt<1>("h0"), bitState) @[I2C.scala 203:24]
    node _T_355 = eq(sSDA, UInt<1>("h0")) @[I2C.scala 205:59]
    node _T_356 = and(sdaChk, _T_355) @[I2C.scala 205:56]
    node _T_357 = and(_T_356, sdaOen) @[I2C.scala 205:65]
    node _T_358 = neq(bitState, UInt<5>("h0")) @[I2C.scala 205:89]
    node _T_359 = and(_T_358, stopCond) @[I2C.scala 205:105]
    node _T_361 = eq(bitCmdStop, UInt<1>("h0")) @[I2C.scala 205:120]
    node _T_362 = and(_T_359, _T_361) @[I2C.scala 205:117]
    node _T_363 = or(_T_357, _T_362) @[I2C.scala 205:76]
    reg arbLost : UInt<1>, clock with :
      reset => (UInt<1>("h0"), arbLost) @[I2C.scala 205:24]
    node _T_370 = eq(UInt<5>("h0"), bitState) @[Conditional.scala 37:30]
    node _T_371 = eq(UInt<1>("h1"), bitCmd) @[Conditional.scala 37:30]
    node _T_372 = eq(UInt<2>("h2"), bitCmd) @[Conditional.scala 37:30]
    node _T_373 = eq(UInt<3>("h4"), bitCmd) @[Conditional.scala 37:30]
    node _T_374 = eq(UInt<4>("h8"), bitCmd) @[Conditional.scala 37:30]
    node _GEN_10 = mux(_T_374, UInt<5>("ha"), bitState) @[Conditional.scala 39:67 I2C.scala 203:24 225:43]
    node _GEN_11 = mux(_T_373, UInt<5>("he"), _GEN_10) @[Conditional.scala 39:67 I2C.scala 224:43]
    node _GEN_12 = mux(_T_372, UInt<5>("h6"), _GEN_11) @[Conditional.scala 39:67 I2C.scala 223:43]
    node _GEN_13 = mux(_T_371, UInt<5>("h1"), _GEN_12) @[Conditional.scala 40:58 I2C.scala 222:43]
    node _T_376 = eq(UInt<5>("h1"), bitState) @[Conditional.scala 37:30]
    node _T_379 = eq(UInt<5>("h2"), bitState) @[Conditional.scala 37:30]
    node _T_383 = eq(UInt<5>("h3"), bitState) @[Conditional.scala 37:30]
    node _T_387 = eq(UInt<5>("h4"), bitState) @[Conditional.scala 37:30]
    node _T_391 = eq(UInt<5>("h5"), bitState) @[Conditional.scala 37:30]
    node _T_396 = eq(UInt<5>("h6"), bitState) @[Conditional.scala 37:30]
    node _T_400 = eq(UInt<5>("h7"), bitState) @[Conditional.scala 37:30]
    node _T_404 = eq(UInt<5>("h8"), bitState) @[Conditional.scala 37:30]
    node _T_408 = eq(UInt<5>("h9"), bitState) @[Conditional.scala 37:30]
    node _T_413 = eq(UInt<5>("ha"), bitState) @[Conditional.scala 37:30]
    node _T_417 = eq(UInt<5>("hb"), bitState) @[Conditional.scala 37:30]
    node _T_421 = eq(UInt<5>("hc"), bitState) @[Conditional.scala 37:30]
    node _T_425 = eq(UInt<5>("hd"), bitState) @[Conditional.scala 37:30]
    node _T_430 = eq(UInt<5>("he"), bitState) @[Conditional.scala 37:30]
    node _T_433 = eq(UInt<5>("hf"), bitState) @[Conditional.scala 37:30]
    node _T_436 = eq(UInt<5>("h10"), bitState) @[Conditional.scala 37:30]
    node _T_439 = eq(UInt<5>("h11"), bitState) @[Conditional.scala 37:30]
    node _GEN_14 = mux(_T_439, UInt<5>("h0"), bitState) @[Conditional.scala 39:67 I2C.scala 333:21 203:24]
    node _GEN_15 = mux(_T_439, UInt<1>("h1"), UInt<1>("h0")) @[Conditional.scala 39:67 I2C.scala 216:15 334:21]
    node _GEN_16 = mux(_T_439, UInt<1>("h0"), sclOen) @[Conditional.scala 39:67 I2C.scala 335:21 177:23]
    node _GEN_17 = mux(_T_439, transmitBit, sdaOen) @[Conditional.scala 39:67 I2C.scala 336:21 180:23]
    node _GEN_18 = mux(_T_439, UInt<1>("h0"), sdaChk) @[Conditional.scala 39:67 I2C.scala 337:21 183:23]
    node _GEN_19 = mux(_T_436, UInt<5>("h11"), _GEN_14) @[Conditional.scala 39:67 I2C.scala 327:21]
    node _GEN_20 = mux(_T_436, UInt<1>("h1"), _GEN_16) @[Conditional.scala 39:67 I2C.scala 328:21]
    node _GEN_21 = mux(_T_436, transmitBit, _GEN_17) @[Conditional.scala 39:67 I2C.scala 329:21]
    node _GEN_22 = mux(_T_436, UInt<1>("h1"), _GEN_18) @[Conditional.scala 39:67 I2C.scala 330:21]
    node _GEN_23 = mux(_T_436, UInt<1>("h0"), _GEN_15) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_24 = mux(_T_433, UInt<5>("h10"), _GEN_19) @[Conditional.scala 39:67 I2C.scala 321:21]
    node _GEN_25 = mux(_T_433, UInt<1>("h1"), _GEN_20) @[Conditional.scala 39:67 I2C.scala 322:21]
    node _GEN_26 = mux(_T_433, transmitBit, _GEN_21) @[Conditional.scala 39:67 I2C.scala 323:21]
    node _GEN_27 = mux(_T_433, UInt<1>("h0"), _GEN_22) @[Conditional.scala 39:67 I2C.scala 324:21]
    node _GEN_28 = mux(_T_433, UInt<1>("h0"), _GEN_23) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_29 = mux(_T_430, UInt<5>("hf"), _GEN_24) @[Conditional.scala 39:67 I2C.scala 315:21]
    node _GEN_30 = mux(_T_430, UInt<1>("h0"), _GEN_25) @[Conditional.scala 39:67 I2C.scala 316:21]
    node _GEN_31 = mux(_T_430, transmitBit, _GEN_26) @[Conditional.scala 39:67 I2C.scala 317:21]
    node _GEN_32 = mux(_T_430, UInt<1>("h0"), _GEN_27) @[Conditional.scala 39:67 I2C.scala 318:21]
    node _GEN_33 = mux(_T_430, UInt<1>("h0"), _GEN_28) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_34 = mux(_T_425, UInt<5>("h0"), _GEN_29) @[Conditional.scala 39:67 I2C.scala 307:21]
    node _GEN_35 = mux(_T_425, UInt<1>("h1"), _GEN_33) @[Conditional.scala 39:67 I2C.scala 308:21]
    node _GEN_36 = mux(_T_425, UInt<1>("h0"), _GEN_30) @[Conditional.scala 39:67 I2C.scala 309:21]
    node _GEN_37 = mux(_T_425, UInt<1>("h1"), _GEN_31) @[Conditional.scala 39:67 I2C.scala 310:21]
    node _GEN_38 = mux(_T_425, UInt<1>("h0"), _GEN_32) @[Conditional.scala 39:67 I2C.scala 311:21]
    node _GEN_39 = mux(_T_421, UInt<5>("hd"), _GEN_34) @[Conditional.scala 39:67 I2C.scala 301:21]
    node _GEN_40 = mux(_T_421, UInt<1>("h1"), _GEN_36) @[Conditional.scala 39:67 I2C.scala 302:21]
    node _GEN_41 = mux(_T_421, UInt<1>("h1"), _GEN_37) @[Conditional.scala 39:67 I2C.scala 303:21]
    node _GEN_42 = mux(_T_421, UInt<1>("h0"), _GEN_38) @[Conditional.scala 39:67 I2C.scala 304:21]
    node _GEN_43 = mux(_T_421, UInt<1>("h0"), _GEN_35) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_44 = mux(_T_417, UInt<5>("hc"), _GEN_39) @[Conditional.scala 39:67 I2C.scala 295:21]
    node _GEN_45 = mux(_T_417, UInt<1>("h1"), _GEN_40) @[Conditional.scala 39:67 I2C.scala 296:21]
    node _GEN_46 = mux(_T_417, UInt<1>("h1"), _GEN_41) @[Conditional.scala 39:67 I2C.scala 297:21]
    node _GEN_47 = mux(_T_417, UInt<1>("h0"), _GEN_42) @[Conditional.scala 39:67 I2C.scala 298:21]
    node _GEN_48 = mux(_T_417, UInt<1>("h0"), _GEN_43) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_49 = mux(_T_413, UInt<5>("hb"), _GEN_44) @[Conditional.scala 39:67 I2C.scala 289:21]
    node _GEN_50 = mux(_T_413, UInt<1>("h0"), _GEN_45) @[Conditional.scala 39:67 I2C.scala 290:21]
    node _GEN_51 = mux(_T_413, UInt<1>("h1"), _GEN_46) @[Conditional.scala 39:67 I2C.scala 291:21]
    node _GEN_52 = mux(_T_413, UInt<1>("h0"), _GEN_47) @[Conditional.scala 39:67 I2C.scala 292:21]
    node _GEN_53 = mux(_T_413, UInt<1>("h0"), _GEN_48) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_54 = mux(_T_408, UInt<5>("h0"), _GEN_49) @[Conditional.scala 39:67 I2C.scala 281:21]
    node _GEN_55 = mux(_T_408, UInt<1>("h1"), _GEN_53) @[Conditional.scala 39:67 I2C.scala 282:21]
    node _GEN_56 = mux(_T_408, UInt<1>("h1"), _GEN_50) @[Conditional.scala 39:67 I2C.scala 283:21]
    node _GEN_57 = mux(_T_408, UInt<1>("h1"), _GEN_51) @[Conditional.scala 39:67 I2C.scala 284:21]
    node _GEN_58 = mux(_T_408, UInt<1>("h0"), _GEN_52) @[Conditional.scala 39:67 I2C.scala 285:21]
    node _GEN_59 = mux(_T_404, UInt<5>("h9"), _GEN_54) @[Conditional.scala 39:67 I2C.scala 275:21]
    node _GEN_60 = mux(_T_404, UInt<1>("h1"), _GEN_56) @[Conditional.scala 39:67 I2C.scala 276:21]
    node _GEN_61 = mux(_T_404, UInt<1>("h0"), _GEN_57) @[Conditional.scala 39:67 I2C.scala 277:21]
    node _GEN_62 = mux(_T_404, UInt<1>("h0"), _GEN_58) @[Conditional.scala 39:67 I2C.scala 278:21]
    node _GEN_63 = mux(_T_404, UInt<1>("h0"), _GEN_55) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_64 = mux(_T_400, UInt<5>("h8"), _GEN_59) @[Conditional.scala 39:67 I2C.scala 269:21]
    node _GEN_65 = mux(_T_400, UInt<1>("h1"), _GEN_60) @[Conditional.scala 39:67 I2C.scala 270:21]
    node _GEN_66 = mux(_T_400, UInt<1>("h0"), _GEN_61) @[Conditional.scala 39:67 I2C.scala 271:21]
    node _GEN_67 = mux(_T_400, UInt<1>("h0"), _GEN_62) @[Conditional.scala 39:67 I2C.scala 272:21]
    node _GEN_68 = mux(_T_400, UInt<1>("h0"), _GEN_63) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_69 = mux(_T_396, UInt<5>("h7"), _GEN_64) @[Conditional.scala 39:67 I2C.scala 263:21]
    node _GEN_70 = mux(_T_396, UInt<1>("h0"), _GEN_65) @[Conditional.scala 39:67 I2C.scala 264:21]
    node _GEN_71 = mux(_T_396, UInt<1>("h0"), _GEN_66) @[Conditional.scala 39:67 I2C.scala 265:21]
    node _GEN_72 = mux(_T_396, UInt<1>("h0"), _GEN_67) @[Conditional.scala 39:67 I2C.scala 266:21]
    node _GEN_73 = mux(_T_396, UInt<1>("h0"), _GEN_68) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_74 = mux(_T_391, UInt<5>("h0"), _GEN_69) @[Conditional.scala 39:67 I2C.scala 255:21]
    node _GEN_75 = mux(_T_391, UInt<1>("h1"), _GEN_73) @[Conditional.scala 39:67 I2C.scala 256:21]
    node _GEN_76 = mux(_T_391, UInt<1>("h0"), _GEN_70) @[Conditional.scala 39:67 I2C.scala 257:21]
    node _GEN_77 = mux(_T_391, UInt<1>("h0"), _GEN_71) @[Conditional.scala 39:67 I2C.scala 258:21]
    node _GEN_78 = mux(_T_391, UInt<1>("h0"), _GEN_72) @[Conditional.scala 39:67 I2C.scala 259:21]
    node _GEN_79 = mux(_T_387, UInt<5>("h5"), _GEN_74) @[Conditional.scala 39:67 I2C.scala 249:21]
    node _GEN_80 = mux(_T_387, UInt<1>("h1"), _GEN_76) @[Conditional.scala 39:67 I2C.scala 250:21]
    node _GEN_81 = mux(_T_387, UInt<1>("h0"), _GEN_77) @[Conditional.scala 39:67 I2C.scala 251:21]
    node _GEN_82 = mux(_T_387, UInt<1>("h0"), _GEN_78) @[Conditional.scala 39:67 I2C.scala 252:21]
    node _GEN_83 = mux(_T_387, UInt<1>("h0"), _GEN_75) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_84 = mux(_T_383, UInt<5>("h4"), _GEN_79) @[Conditional.scala 39:67 I2C.scala 243:21]
    node _GEN_85 = mux(_T_383, UInt<1>("h1"), _GEN_80) @[Conditional.scala 39:67 I2C.scala 244:21]
    node _GEN_86 = mux(_T_383, UInt<1>("h0"), _GEN_81) @[Conditional.scala 39:67 I2C.scala 245:21]
    node _GEN_87 = mux(_T_383, UInt<1>("h0"), _GEN_82) @[Conditional.scala 39:67 I2C.scala 246:21]
    node _GEN_88 = mux(_T_383, UInt<1>("h0"), _GEN_83) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_89 = mux(_T_379, UInt<5>("h3"), _GEN_84) @[Conditional.scala 39:67 I2C.scala 237:21]
    node _GEN_90 = mux(_T_379, UInt<1>("h1"), _GEN_85) @[Conditional.scala 39:67 I2C.scala 238:21]
    node _GEN_91 = mux(_T_379, UInt<1>("h1"), _GEN_86) @[Conditional.scala 39:67 I2C.scala 239:21]
    node _GEN_92 = mux(_T_379, UInt<1>("h0"), _GEN_87) @[Conditional.scala 39:67 I2C.scala 240:21]
    node _GEN_93 = mux(_T_379, UInt<1>("h0"), _GEN_88) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_94 = mux(_T_376, UInt<5>("h2"), _GEN_89) @[Conditional.scala 39:67 I2C.scala 231:21]
    node _GEN_95 = mux(_T_376, sclOen, _GEN_90) @[Conditional.scala 39:67 I2C.scala 232:21]
    node _GEN_96 = mux(_T_376, UInt<1>("h1"), _GEN_91) @[Conditional.scala 39:67 I2C.scala 233:21]
    node _GEN_97 = mux(_T_376, UInt<1>("h0"), _GEN_92) @[Conditional.scala 39:67 I2C.scala 234:21]
    node _GEN_98 = mux(_T_376, UInt<1>("h0"), _GEN_93) @[Conditional.scala 39:67 I2C.scala 216:15]
    node _GEN_99 = mux(_T_370, _GEN_13, _GEN_94) @[Conditional.scala 40:58]
    node _GEN_100 = mux(_T_370, UInt<1>("h0"), _GEN_97) @[Conditional.scala 40:58 I2C.scala 227:18]
    node _GEN_101 = mux(_T_370, sclOen, _GEN_95) @[Conditional.scala 40:58 I2C.scala 177:23]
    node _GEN_102 = mux(_T_370, sdaOen, _GEN_96) @[Conditional.scala 40:58 I2C.scala 180:23]
    node _GEN_103 = mux(_T_370, UInt<1>("h0"), _GEN_98) @[Conditional.scala 40:58 I2C.scala 216:15]
    node _GEN_104 = mux(clkEn, _GEN_99, bitState) @[I2C.scala 218:18 203:24]
    node _GEN_105 = mux(clkEn, _GEN_100, sdaChk) @[I2C.scala 218:18 183:23]
    node _GEN_106 = mux(clkEn, _GEN_101, sclOen) @[I2C.scala 218:18 177:23]
    node _GEN_107 = mux(clkEn, _GEN_102, sdaOen) @[I2C.scala 218:18 180:23]
    node _GEN_108 = mux(clkEn, _GEN_103, UInt<1>("h0")) @[I2C.scala 216:15 218:18]
    node _GEN_109 = mux(arbLost, UInt<5>("h0"), _GEN_104) @[I2C.scala 208:18 209:15]
    node _GEN_110 = mux(arbLost, UInt<1>("h0"), _GEN_108) @[I2C.scala 208:18 210:15]
    node _GEN_111 = mux(arbLost, UInt<1>("h1"), _GEN_106) @[I2C.scala 208:18 211:15]
    node _GEN_112 = mux(arbLost, UInt<1>("h1"), _GEN_107) @[I2C.scala 208:18 212:15]
    node _GEN_113 = mux(arbLost, UInt<1>("h0"), _GEN_105) @[I2C.scala 208:18 213:15]
    reg load : UInt<1>, clock with :
      reset => (UInt<1>("h0"), load) @[I2C.scala 345:24]
    reg shift : UInt<1>, clock with :
      reset => (UInt<1>("h0"), shift) @[I2C.scala 346:24]
    reg cmdAck : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cmdAck) @[I2C.scala 347:24]
    reg receivedAck : UInt<1>, clock with :
      reset => (UInt<1>("h0"), receivedAck) @[I2C.scala 348:24]
    node _T_451 = or(cmd_read, cmd_write) @[I2C.scala 349:31]
    node _T_452 = or(_T_451, cmd_stop) @[I2C.scala 349:43]
    node _T_454 = eq(cmdAck, UInt<1>("h0")) @[I2C.scala 349:57]
    node go = and(_T_452, _T_454) @[I2C.scala 349:55]
    reg bitCnt : UInt<3>, clock with :
      reset => (UInt<1>("h0"), bitCnt) @[I2C.scala 351:24]
    node _T_459 = sub(bitCnt, UInt<1>("h1")) @[I2C.scala 356:22]
    node _T_460 = asUInt(_T_459) @[I2C.scala 356:22]
    node _T_461 = tail(_T_460, 1) @[I2C.scala 356:22]
    node _GEN_114 = mux(shift, _T_461, bitCnt) @[I2C.scala 355:21 356:12 351:24]
    node _GEN_115 = mux(load, UInt<3>("h7"), _GEN_114) @[I2C.scala 352:15 353:12]
    node _T_463 = neq(bitCnt, UInt<1>("h0")) @[I2C.scala 358:30]
    node bitCntDone = eq(_T_463, UInt<1>("h0")) @[I2C.scala 358:21]
    node _T_465 = cat(receivedData, receivedBit) @[Cat.scala 30:58]
    node _GEN_116 = mux(shift, _T_465, receivedData) @[I2C.scala 364:21 365:18 112:25]
    node _GEN_117 = mux(load, transmitData, _GEN_116) @[I2C.scala 361:15 362:18]
    reg byteState : UInt<3>, clock with :
      reset => (UInt<1>("h0"), byteState) @[I2C.scala 369:24]
    node _T_473 = bits(receivedData, 7, 7) @[I2C.scala 381:32]
    node _T_477 = eq(UInt<3>("h0"), byteState) @[Conditional.scala 37:30]
    node _GEN_118 = mux(cmd_write, UInt<3>("h3"), UInt<3>("h5")) @[I2C.scala 397:33 398:23 402:23]
    node _GEN_119 = mux(cmd_write, UInt<3>("h4"), UInt<2>("h2")) @[I2C.scala 397:33 399:23 403:23]
    node _GEN_120 = mux(cmd_read, UInt<3>("h2"), _GEN_118) @[I2C.scala 393:32 394:23]
    node _GEN_121 = mux(cmd_read, UInt<4>("h8"), _GEN_119) @[I2C.scala 393:32 395:23]
    node _GEN_122 = mux(cmd_start, UInt<3>("h1"), _GEN_120) @[I2C.scala 389:28 390:23]
    node _GEN_123 = mux(cmd_start, UInt<1>("h1"), _GEN_121) @[I2C.scala 389:28 391:23]
    node _GEN_124 = mux(go, _GEN_122, byteState) @[I2C.scala 388:19 369:24]
    node _GEN_125 = mux(go, _GEN_123, bitCmd) @[I2C.scala 388:19 191:24]
    node _GEN_126 = mux(go, UInt<1>("h1"), UInt<1>("h0")) @[I2C.scala 383:17 388:19 406:23]
    node _T_479 = eq(UInt<3>("h1"), byteState) @[Conditional.scala 37:30]
    node _GEN_127 = mux(cmd_read, UInt<3>("h2"), UInt<3>("h3")) @[I2C.scala 411:27 412:23 416:23]
    node _GEN_128 = mux(cmd_read, UInt<4>("h8"), UInt<3>("h4")) @[I2C.scala 411:27 413:23 417:23]
    node _GEN_129 = mux(bitCmdAck, _GEN_127, byteState) @[I2C.scala 369:24 410:26]
    node _GEN_130 = mux(bitCmdAck, _GEN_128, bitCmd) @[I2C.scala 191:24 410:26]
    node _GEN_131 = mux(bitCmdAck, UInt<1>("h1"), UInt<1>("h0")) @[I2C.scala 383:17 410:26 420:23]
    node _T_481 = eq(UInt<3>("h3"), byteState) @[Conditional.scala 37:30]
    node _GEN_132 = mux(bitCntDone, UInt<3>("h4"), UInt<3>("h3")) @[I2C.scala 425:29 426:23 430:23]
    node _GEN_133 = mux(bitCntDone, UInt<4>("h8"), UInt<3>("h4")) @[I2C.scala 425:29 427:23 431:23]
    node _GEN_134 = mux(bitCntDone, UInt<1>("h0"), UInt<1>("h1")) @[I2C.scala 382:17 425:29 432:23]
    node _GEN_135 = mux(bitCmdAck, _GEN_132, byteState) @[I2C.scala 369:24 424:26]
    node _GEN_136 = mux(bitCmdAck, _GEN_133, bitCmd) @[I2C.scala 191:24 424:26]
    node _GEN_137 = mux(bitCmdAck, _GEN_134, UInt<1>("h0")) @[I2C.scala 382:17 424:26]
    node _T_483 = eq(UInt<3>("h2"), byteState) @[Conditional.scala 37:30]
    node _GEN_138 = mux(bitCntDone, UInt<3>("h4"), UInt<3>("h2")) @[I2C.scala 438:29 439:23 443:23]
    node _GEN_139 = mux(bitCntDone, UInt<3>("h4"), UInt<4>("h8")) @[I2C.scala 438:29 440:23 444:23]
    node _GEN_140 = mux(bitCmdAck, _GEN_138, byteState) @[I2C.scala 369:24 437:26]
    node _GEN_141 = mux(bitCmdAck, _GEN_139, bitCmd) @[I2C.scala 191:24 437:26]
    node _GEN_142 = mux(bitCmdAck, cmd_ack, _T_473) @[I2C.scala 381:17 437:26 448:23]
    node _T_485 = eq(UInt<3>("h4"), byteState) @[Conditional.scala 37:30]
    node _GEN_143 = mux(cmd_stop, UInt<3>("h5"), UInt<3>("h0")) @[I2C.scala 453:27 454:23 458:23]
    node _GEN_144 = mux(cmd_stop, UInt<2>("h2"), UInt<1>("h0")) @[I2C.scala 453:27 455:23 459:23]
    node _GEN_145 = mux(cmd_stop, UInt<1>("h0"), UInt<1>("h1")) @[I2C.scala 384:17 453:27 462:23]
    node _GEN_146 = mux(bitCmdAck, _GEN_143, byteState) @[I2C.scala 369:24 452:26]
    node _GEN_147 = mux(bitCmdAck, _GEN_144, bitCmd) @[I2C.scala 191:24 452:26]
    node _GEN_148 = mux(bitCmdAck, _GEN_145, UInt<1>("h0")) @[I2C.scala 384:17 452:26]
    node _GEN_149 = mux(bitCmdAck, receivedBit, receivedAck) @[I2C.scala 452:26 466:23 348:24]
    node _GEN_150 = mux(bitCmdAck, UInt<1>("h1"), cmd_ack) @[I2C.scala 452:26 468:23 471:23]
    node _T_488 = eq(UInt<3>("h5"), byteState) @[Conditional.scala 37:30]
    node _GEN_151 = mux(bitCmdAck, UInt<3>("h0"), byteState) @[I2C.scala 475:26 476:21 369:24]
    node _GEN_152 = mux(bitCmdAck, UInt<1>("h0"), bitCmd) @[I2C.scala 475:26 477:21 191:24]
    node _GEN_153 = mux(_T_488, _GEN_151, byteState) @[Conditional.scala 39:67 I2C.scala 369:24]
    node _GEN_154 = mux(_T_488, _GEN_152, bitCmd) @[Conditional.scala 39:67 I2C.scala 191:24]
    node _GEN_155 = mux(_T_488, _GEN_131, UInt<1>("h0")) @[Conditional.scala 39:67 I2C.scala 384:17]
    node _GEN_156 = mux(_T_485, _GEN_146, _GEN_153) @[Conditional.scala 39:67]
    node _GEN_157 = mux(_T_485, _GEN_147, _GEN_154) @[Conditional.scala 39:67]
    node _GEN_158 = mux(_T_485, _GEN_148, _GEN_155) @[Conditional.scala 39:67]
    node _GEN_159 = mux(_T_485, _GEN_149, receivedAck) @[Conditional.scala 39:67 I2C.scala 348:24]
    node _GEN_160 = mux(_T_485, _GEN_150, _T_473) @[Conditional.scala 39:67 I2C.scala 381:17]
    node _GEN_161 = mux(_T_483, _GEN_140, _GEN_156) @[Conditional.scala 39:67]
    node _GEN_162 = mux(_T_483, _GEN_141, _GEN_157) @[Conditional.scala 39:67]
    node _GEN_163 = mux(_T_483, _GEN_131, UInt<1>("h0")) @[Conditional.scala 39:67 I2C.scala 382:17]
    node _GEN_164 = mux(_T_483, _GEN_142, _GEN_160) @[Conditional.scala 39:67]
    node _GEN_165 = mux(_T_483, UInt<1>("h0"), _GEN_158) @[Conditional.scala 39:67 I2C.scala 384:17]
    node _GEN_166 = mux(_T_483, receivedAck, _GEN_159) @[Conditional.scala 39:67 I2C.scala 348:24]
    node _GEN_167 = mux(_T_481, _GEN_135, _GEN_161) @[Conditional.scala 39:67]
    node _GEN_168 = mux(_T_481, _GEN_136, _GEN_162) @[Conditional.scala 39:67]
    node _GEN_169 = mux(_T_481, _GEN_137, _GEN_163) @[Conditional.scala 39:67]
    node _GEN_170 = mux(_T_481, _T_473, _GEN_164) @[Conditional.scala 39:67 I2C.scala 381:17]
    node _GEN_171 = mux(_T_481, UInt<1>("h0"), _GEN_165) @[Conditional.scala 39:67 I2C.scala 384:17]
    node _GEN_172 = mux(_T_481, receivedAck, _GEN_166) @[Conditional.scala 39:67 I2C.scala 348:24]
    node _GEN_173 = mux(_T_479, _GEN_129, _GEN_167) @[Conditional.scala 39:67]
    node _GEN_174 = mux(_T_479, _GEN_130, _GEN_168) @[Conditional.scala 39:67]
    node _GEN_175 = mux(_T_479, _GEN_131, UInt<1>("h0")) @[Conditional.scala 39:67 I2C.scala 383:17]
    node _GEN_176 = mux(_T_479, UInt<1>("h0"), _GEN_169) @[Conditional.scala 39:67 I2C.scala 382:17]
    node _GEN_177 = mux(_T_479, _T_473, _GEN_170) @[Conditional.scala 39:67 I2C.scala 381:17]
    node _GEN_178 = mux(_T_479, UInt<1>("h0"), _GEN_171) @[Conditional.scala 39:67 I2C.scala 384:17]
    node _GEN_179 = mux(_T_479, receivedAck, _GEN_172) @[Conditional.scala 39:67 I2C.scala 348:24]
    node _GEN_180 = mux(_T_477, _GEN_124, _GEN_173) @[Conditional.scala 40:58]
    node _GEN_181 = mux(_T_477, _GEN_125, _GEN_174) @[Conditional.scala 40:58]
    node _GEN_182 = mux(_T_477, _GEN_126, _GEN_175) @[Conditional.scala 40:58]
    node _GEN_183 = mux(_T_477, UInt<1>("h0"), _GEN_176) @[Conditional.scala 40:58 I2C.scala 382:17]
    node _GEN_184 = mux(_T_477, _T_473, _GEN_177) @[Conditional.scala 40:58 I2C.scala 381:17]
    node _GEN_185 = mux(_T_477, UInt<1>("h0"), _GEN_178) @[Conditional.scala 40:58 I2C.scala 384:17]
    node _GEN_186 = mux(_T_477, receivedAck, _GEN_179) @[Conditional.scala 40:58 I2C.scala 348:24]
    node _GEN_187 = mux(arbLost, UInt<1>("h0"), _GEN_181) @[I2C.scala 371:18 372:17]
    node _GEN_188 = mux(arbLost, UInt<1>("h0"), _GEN_184) @[I2C.scala 371:18 373:17]
    node _GEN_189 = mux(arbLost, UInt<1>("h0"), _GEN_183) @[I2C.scala 371:18 374:17]
    node _GEN_190 = mux(arbLost, UInt<1>("h0"), _GEN_182) @[I2C.scala 371:18 375:17]
    node _GEN_191 = mux(arbLost, UInt<1>("h0"), _GEN_185) @[I2C.scala 371:18 376:17]
    node _GEN_192 = mux(arbLost, UInt<3>("h0"), _GEN_180) @[I2C.scala 371:18 377:17]
    node _GEN_193 = mux(arbLost, UInt<1>("h0"), _GEN_186) @[I2C.scala 371:18 378:17]
    node _T_26_a_valid = auto_in_a_valid @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_537_valid = _T_26_a_valid @[RegisterRouter.scala 54:18 65:15]
    node _T_26_a_bits_opcode = auto_in_a_bits_opcode @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_541 = eq(_T_26_a_bits_opcode, UInt<3>("h4")) @[RegisterRouter.scala 55:36]
    node _T_537_bits_read = _T_541 @[RegisterRouter.scala 54:18 55:19]
    node _T_555_bits_read = _T_537_bits_read @[RegisterRouter.scala 62:{24,24}]
    node _T_26_a_bits_address = auto_in_a_bits_address @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_542 = shr(_T_26_a_bits_address, 2) @[Edges.scala 183:34]
    node _T_537_bits_index = bits(_T_542, 9, 0) @[RegisterRouter.scala 54:18 56:19]
    node _T_555_bits_index = _T_537_bits_index @[RegisterRouter.scala 62:{24,24}]
    node _T_1042 = bits(_T_555_bits_index, 2, 2) @[RegisterRouter.scala 62:24]
    node _T_1041 = bits(_T_555_bits_index, 1, 1) @[RegisterRouter.scala 62:24]
    node _T_1050 = cat(_T_1042, _T_1041) @[Cat.scala 30:58]
    node _T_1040 = bits(_T_555_bits_index, 0, 0) @[RegisterRouter.scala 62:24]
    node _T_1051 = cat(_T_1050, _T_1040) @[Cat.scala 30:58]
    node _T_1143 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1148 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1149 = or(_T_1143, _T_1148) @[RegisterRouter.scala 62:24]
    node _T_1152_7 = _T_1149 @[RegisterRouter.scala 62:{24,24}]
    node _T_1135 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1140 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1141 = or(_T_1135, _T_1140) @[RegisterRouter.scala 62:24]
    node _T_1152_6 = _T_1141 @[RegisterRouter.scala 62:{24,24}]
    node _T_1127 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1132 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1133 = or(_T_1127, _T_1132) @[RegisterRouter.scala 62:24]
    node _T_1152_5 = _T_1133 @[RegisterRouter.scala 62:{24,24}]
    node _T_1119 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_613 = xor(_T_555_bits_index, UInt<10>("h4")) @[RegisterRouter.scala 62:24]
    node _T_559 = not(UInt<10>("h7")) @[RegisterRouter.scala 62:24]
    node _T_614 = and(_T_613, _T_559) @[RegisterRouter.scala 62:24]
    node _T_616 = eq(_T_614, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1124 = eq(_T_616, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1125 = or(_T_1119, _T_1124) @[RegisterRouter.scala 62:24]
    node _T_1152_4 = _T_1125 @[RegisterRouter.scala 62:{24,24}]
    node _T_1111 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_604 = xor(_T_555_bits_index, UInt<10>("h3")) @[RegisterRouter.scala 62:24]
    node _T_605 = and(_T_604, _T_559) @[RegisterRouter.scala 62:24]
    node _T_607 = eq(_T_605, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1116 = eq(_T_607, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1117 = or(_T_1111, _T_1116) @[RegisterRouter.scala 62:24]
    node _T_1152_3 = _T_1117 @[RegisterRouter.scala 62:{24,24}]
    node _T_1103 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_595 = xor(_T_555_bits_index, UInt<10>("h2")) @[RegisterRouter.scala 62:24]
    node _T_596 = and(_T_595, _T_559) @[RegisterRouter.scala 62:24]
    node _T_598 = eq(_T_596, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1108 = eq(_T_598, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1109 = or(_T_1103, _T_1108) @[RegisterRouter.scala 62:24]
    node _T_1152_2 = _T_1109 @[RegisterRouter.scala 62:{24,24}]
    node _T_1095 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_586 = xor(_T_555_bits_index, UInt<10>("h1")) @[RegisterRouter.scala 62:24]
    node _T_587 = and(_T_586, _T_559) @[RegisterRouter.scala 62:24]
    node _T_589 = eq(_T_587, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1100 = eq(_T_589, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1101 = or(_T_1095, _T_1100) @[RegisterRouter.scala 62:24]
    node _T_1152_1 = _T_1101 @[RegisterRouter.scala 62:{24,24}]
    node _T_1087 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_577 = xor(_T_555_bits_index, UInt<10>("h0")) @[RegisterRouter.scala 62:24]
    node _T_578 = and(_T_577, _T_559) @[RegisterRouter.scala 62:24]
    node _T_580 = eq(_T_578, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1092 = eq(_T_580, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1093 = or(_T_1087, _T_1092) @[RegisterRouter.scala 62:24]
    node _T_1152_0 = _T_1093 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_212 = validif(eq(UInt<1>("h0"), _T_1051), _T_1152_0) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_213 = mux(eq(UInt<1>("h1"), _T_1051), _T_1152_1, _GEN_212) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_214 = mux(eq(UInt<2>("h2"), _T_1051), _T_1152_2, _GEN_213) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_215 = mux(eq(UInt<2>("h3"), _T_1051), _T_1152_3, _GEN_214) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_216 = mux(eq(UInt<3>("h4"), _T_1051), _T_1152_4, _GEN_215) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_217 = mux(eq(UInt<3>("h5"), _T_1051), _T_1152_5, _GEN_216) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_218 = mux(eq(UInt<3>("h6"), _T_1051), _T_1152_6, _GEN_217) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_219 = mux(eq(UInt<3>("h7"), _T_1051), _T_1152_7, _GEN_218) @[RegisterRouter.scala 62:{24,24}]
    node _T_1152_T_1051 = _GEN_219 @[RegisterRouter.scala 62:24]
    node _T_1224 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1229 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1230 = or(_T_1224, _T_1229) @[RegisterRouter.scala 62:24]
    node _T_1233_7 = _T_1230 @[RegisterRouter.scala 62:{24,24}]
    node _T_1216 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1221 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1222 = or(_T_1216, _T_1221) @[RegisterRouter.scala 62:24]
    node _T_1233_6 = _T_1222 @[RegisterRouter.scala 62:{24,24}]
    node _T_1208 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1213 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1214 = or(_T_1208, _T_1213) @[RegisterRouter.scala 62:24]
    node _T_1233_5 = _T_1214 @[RegisterRouter.scala 62:{24,24}]
    node _T_1200 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1205 = eq(_T_616, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1206 = or(_T_1200, _T_1205) @[RegisterRouter.scala 62:24]
    node _T_1233_4 = _T_1206 @[RegisterRouter.scala 62:{24,24}]
    node _T_1192 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1197 = eq(_T_607, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1198 = or(_T_1192, _T_1197) @[RegisterRouter.scala 62:24]
    node _T_1233_3 = _T_1198 @[RegisterRouter.scala 62:{24,24}]
    node _T_1184 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1189 = eq(_T_598, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1190 = or(_T_1184, _T_1189) @[RegisterRouter.scala 62:24]
    node _T_1233_2 = _T_1190 @[RegisterRouter.scala 62:{24,24}]
    node _T_1176 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1181 = eq(_T_589, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1182 = or(_T_1176, _T_1181) @[RegisterRouter.scala 62:24]
    node _T_1233_1 = _T_1182 @[RegisterRouter.scala 62:{24,24}]
    node _T_1168 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1173 = eq(_T_580, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1174 = or(_T_1168, _T_1173) @[RegisterRouter.scala 62:24]
    node _T_1233_0 = _T_1174 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_220 = validif(eq(UInt<1>("h0"), _T_1051), _T_1233_0) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_221 = mux(eq(UInt<1>("h1"), _T_1051), _T_1233_1, _GEN_220) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_222 = mux(eq(UInt<2>("h2"), _T_1051), _T_1233_2, _GEN_221) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_223 = mux(eq(UInt<2>("h3"), _T_1051), _T_1233_3, _GEN_222) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_224 = mux(eq(UInt<3>("h4"), _T_1051), _T_1233_4, _GEN_223) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_225 = mux(eq(UInt<3>("h5"), _T_1051), _T_1233_5, _GEN_224) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_226 = mux(eq(UInt<3>("h6"), _T_1051), _T_1233_6, _GEN_225) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_227 = mux(eq(UInt<3>("h7"), _T_1051), _T_1233_7, _GEN_226) @[RegisterRouter.scala 62:{24,24}]
    node _T_1233_T_1051 = _GEN_227 @[RegisterRouter.scala 62:24]
    node _T_1406 = mux(_T_555_bits_read, _T_1152_T_1051, _T_1233_T_1051) @[RegisterRouter.scala 62:24]
    node _T_1411 = and(_T_537_valid, _T_1406) @[RegisterRouter.scala 62:24]
    node _T_555_valid = _T_1411 @[RegisterRouter.scala 62:{24,24}]
    node _T_26_d_ready = auto_in_d_ready @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_548_ready = _T_26_d_ready @[RegisterRouter.scala 62:24 68:15]
    node _T_1323 = and(_T_555_valid, _T_548_ready) @[RegisterRouter.scala 62:24]
    node _T_1325 = eq(_T_555_bits_read, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1326 = and(_T_1323, _T_1325) @[RegisterRouter.scala 62:24]
    node _T_1054 = bits(_T_555_bits_index, 2, 2) @[RegisterRouter.scala 62:24]
    node _T_1053 = bits(_T_555_bits_index, 1, 1) @[RegisterRouter.scala 62:24]
    node _T_1062 = cat(_T_1054, _T_1053) @[Cat.scala 30:58]
    node _T_1052 = bits(_T_555_bits_index, 0, 0) @[RegisterRouter.scala 62:24]
    node _T_1063 = cat(_T_1062, _T_1052) @[Cat.scala 30:58]
    node _T_1075 = dshl(UInt<1>("h1"), _T_1063) @[OneHot.scala 45:35]
    node _T_1080 = bits(_T_1075, 4, 4) @[RegisterRouter.scala 62:24]
    node _T_1361 = and(_T_1326, _T_1080) @[RegisterRouter.scala 62:24]
    node _T_617 = xor(_T_555_bits_index, UInt<10>("h4")) @[RegisterRouter.scala 62:24]
    node _T_618 = and(_T_617, _T_559) @[RegisterRouter.scala 62:24]
    node _T_620 = eq(_T_618, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1362 = and(_T_1361, _T_620) @[RegisterRouter.scala 62:24]
    node _T_663_6 = _T_1362 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_26_a_bits_mask = auto_in_a_bits_mask @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_537_bits_mask = _T_26_a_bits_mask @[RegisterRouter.scala 54:18 58:19]
    node _T_555_bits_mask = _T_537_bits_mask @[RegisterRouter.scala 62:{24,24}]
    node _T_707 = bits(_T_555_bits_mask, 3, 3) @[Bitwise.scala 27:51]
    node _T_720 = bits(_T_707, 0, 0) @[Bitwise.scala 72:15]
    node _T_723 = mux(_T_720, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_706 = bits(_T_555_bits_mask, 2, 2) @[Bitwise.scala 27:51]
    node _T_716 = bits(_T_706, 0, 0) @[Bitwise.scala 72:15]
    node _T_719 = mux(_T_716, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_725 = cat(_T_723, _T_719) @[Cat.scala 30:58]
    node _T_705 = bits(_T_555_bits_mask, 1, 1) @[Bitwise.scala 27:51]
    node _T_712 = bits(_T_705, 0, 0) @[Bitwise.scala 72:15]
    node _T_715 = mux(_T_712, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_704 = bits(_T_555_bits_mask, 0, 0) @[Bitwise.scala 27:51]
    node _T_708 = bits(_T_704, 0, 0) @[Bitwise.scala 72:15]
    node _T_711 = mux(_T_708, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_724 = cat(_T_715, _T_711) @[Cat.scala 30:58]
    node _T_726 = cat(_T_725, _T_724) @[Cat.scala 30:58]
    node _T_1001 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_1002 = not(_T_1001) @[RegisterRouter.scala 62:24]
    node _T_1004 = eq(_T_1002, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1008 = and(_T_663_6, _T_1004) @[RegisterRouter.scala 62:24]
    node _T_26_a_bits_data = auto_in_a_bits_data @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_537_bits_data = _T_26_a_bits_data @[RegisterRouter.scala 54:18 57:19]
    node _T_555_bits_data = _T_537_bits_data @[RegisterRouter.scala 62:{24,24}]
    node _T_1015 = bits(_T_555_bits_data, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_506 = cat(cmd_start, cmd_stop) @[I2C.scala 492:18]
    node _T_505 = cat(cmd_read, cmd_write) @[I2C.scala 492:18]
    node _T_507 = cat(_T_506, _T_505) @[I2C.scala 492:18]
    node _T_503 = cat(cmd_ack, cmd_reserved) @[I2C.scala 492:18]
    node _T_504 = cat(_T_503, cmd_irqAck) @[I2C.scala 492:18]
    node _T_508 = cat(_T_507, _T_504) @[I2C.scala 492:18]
    node _T_510 = and(_T_508, UInt<8>("hfe")) @[I2C.scala 492:25]
    node _GEN_211 = mux(_T_1008, _T_1015, _T_510) @[I2C.scala 492:11 538:77 540:74]
    node nextCmd = _GEN_211 @[I2C.scala 490:21]
    node _T_495 = nextCmd
    node _T_496 = bits(_T_495, 0, 0) @[I2C.scala 491:38]
    node _T_497 = bits(_T_495, 2, 1) @[I2C.scala 491:38]
    node _T_498 = bits(_T_495, 3, 3) @[I2C.scala 491:38]
    node _T_499 = bits(_T_495, 4, 4) @[I2C.scala 491:38]
    node _T_500 = bits(_T_495, 5, 5) @[I2C.scala 491:38]
    node _T_501 = bits(_T_495, 6, 6) @[I2C.scala 491:38]
    node _T_502 = bits(_T_495, 7, 7) @[I2C.scala 491:38]
    node _T_511 = or(cmdAck, arbLost) @[I2C.scala 495:16]
    node _T_493_start = _T_502 @[I2C.scala 491:{38,38}]
    node _GEN_194 = mux(_T_511, UInt<1>("h0"), _T_493_start) @[I2C.scala 495:28 496:15 491:7]
    node _T_493_stop = _T_501 @[I2C.scala 491:{38,38}]
    node _GEN_195 = mux(_T_511, UInt<1>("h0"), _T_493_stop) @[I2C.scala 495:28 497:15 491:7]
    node _T_493_read = _T_500 @[I2C.scala 491:{38,38}]
    node _GEN_196 = mux(_T_511, UInt<1>("h0"), _T_493_read) @[I2C.scala 495:28 498:15 491:7]
    node _T_493_write = _T_499 @[I2C.scala 491:{38,38}]
    node _GEN_197 = mux(_T_511, UInt<1>("h0"), _T_493_write) @[I2C.scala 495:28 499:15 491:7]
    node _GEN_198 = mux(startCond, UInt<1>("h1"), status_busy) @[I2C.scala 114:25 506:25 507:29]
    node _GEN_199 = mux(stopCond, UInt<1>("h0"), _GEN_198) @[I2C.scala 503:19 504:29]
    node _GEN_200 = mux(cmd_start, UInt<1>("h0"), status_arbLost) @[I2C.scala 114:25 513:25 514:29]
    node _GEN_201 = mux(arbLost, UInt<1>("h1"), _GEN_200) @[I2C.scala 510:18 511:29]
    node _T_520 = or(cmd_read, cmd_write) @[I2C.scala 516:41]
    node _T_521 = or(cmdAck, arbLost) @[I2C.scala 517:40]
    node _T_522 = or(_T_521, status_irqFlag) @[I2C.scala 517:51]
    node _T_524 = eq(cmd_irqAck, UInt<1>("h0")) @[I2C.scala 517:73]
    node _T_525 = and(_T_522, _T_524) @[I2C.scala 517:70]
    reg statusReadReady : UInt<1>, clock with :
      reset => (UInt<1>("h0"), statusReadReady) @[I2C.scala 520:28]
    node _T_528 = or(cmdAck, arbLost) @[I2C.scala 521:16]
    node _T_531 = eq(statusReadReady, UInt<1>("h0")) @[I2C.scala 524:14]
    node _GEN_202 = mux(_T_531, UInt<1>("h1"), statusReadReady) @[I2C.scala 524:32 525:21 520:28]
    node _GEN_203 = mux(_T_528, UInt<1>("h0"), _GEN_202) @[I2C.scala 521:28 522:21]
    node _T_26_a_bits_source = auto_in_a_bits_source @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_26_a_bits_size = auto_in_a_bits_size @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_543 = cat(_T_26_a_bits_source, _T_26_a_bits_size) @[Cat.scala 30:58]
    node _T_581 = xor(_T_555_bits_index, UInt<10>("h0")) @[RegisterRouter.scala 62:24]
    node _T_582 = and(_T_581, _T_559) @[RegisterRouter.scala 62:24]
    node _T_584 = eq(_T_582, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_590 = xor(_T_555_bits_index, UInt<10>("h1")) @[RegisterRouter.scala 62:24]
    node _T_591 = and(_T_590, _T_559) @[RegisterRouter.scala 62:24]
    node _T_593 = eq(_T_591, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_599 = xor(_T_555_bits_index, UInt<10>("h2")) @[RegisterRouter.scala 62:24]
    node _T_600 = and(_T_599, _T_559) @[RegisterRouter.scala 62:24]
    node _T_602 = eq(_T_600, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_608 = xor(_T_555_bits_index, UInt<10>("h3")) @[RegisterRouter.scala 62:24]
    node _T_609 = and(_T_608, _T_559) @[RegisterRouter.scala 62:24]
    node _T_611 = eq(_T_609, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_681 = bits(_T_555_bits_mask, 0, 0) @[Bitwise.scala 27:51]
    node _T_682 = bits(_T_555_bits_mask, 1, 1) @[Bitwise.scala 27:51]
    node _T_683 = bits(_T_555_bits_mask, 2, 2) @[Bitwise.scala 27:51]
    node _T_684 = bits(_T_555_bits_mask, 3, 3) @[Bitwise.scala 27:51]
    node _T_685 = bits(_T_681, 0, 0) @[Bitwise.scala 72:15]
    node _T_688 = mux(_T_685, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_689 = bits(_T_682, 0, 0) @[Bitwise.scala 72:15]
    node _T_692 = mux(_T_689, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_693 = bits(_T_683, 0, 0) @[Bitwise.scala 72:15]
    node _T_696 = mux(_T_693, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_697 = bits(_T_684, 0, 0) @[Bitwise.scala 72:15]
    node _T_700 = mux(_T_697, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_701 = cat(_T_692, _T_688) @[Cat.scala 30:58]
    node _T_702 = cat(_T_700, _T_696) @[Cat.scala 30:58]
    node _T_703 = cat(_T_702, _T_701) @[Cat.scala 30:58]
    node _T_727 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_729 = neq(_T_727, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_730 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_731 = not(_T_730) @[RegisterRouter.scala 62:24]
    node _T_733 = eq(_T_731, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_734 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_736 = neq(_T_734, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_737 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_738 = not(_T_737) @[RegisterRouter.scala 62:24]
    node _T_740 = eq(_T_738, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1303 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1308 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1309 = or(_T_1303, _T_1308) @[RegisterRouter.scala 62:24]
    node _T_1312_7 = _T_1309 @[RegisterRouter.scala 62:{24,24}]
    node _T_1295 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1300 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1301 = or(_T_1295, _T_1300) @[RegisterRouter.scala 62:24]
    node _T_1312_6 = _T_1301 @[RegisterRouter.scala 62:{24,24}]
    node _T_1287 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1292 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1293 = or(_T_1287, _T_1292) @[RegisterRouter.scala 62:24]
    node _T_1312_5 = _T_1293 @[RegisterRouter.scala 62:{24,24}]
    node _T_998 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_1000 = neq(_T_998, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1030 = eq(_T_1000, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1031 = or(statusReadReady, _T_1030) @[RegisterRouter.scala 62:24]
    node _T_1279 = _T_1031 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1284 = eq(_T_620, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1285 = or(_T_1279, _T_1284) @[RegisterRouter.scala 62:24]
    node _T_1312_4 = _T_1285 @[RegisterRouter.scala 62:{24,24}]
    node _T_1271 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1276 = eq(_T_611, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1277 = or(_T_1271, _T_1276) @[RegisterRouter.scala 62:24]
    node _T_1312_3 = _T_1277 @[RegisterRouter.scala 62:{24,24}]
    node _T_1263 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1268 = eq(_T_602, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1269 = or(_T_1263, _T_1268) @[RegisterRouter.scala 62:24]
    node _T_1312_2 = _T_1269 @[RegisterRouter.scala 62:{24,24}]
    node _T_1255 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1260 = eq(_T_593, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1261 = or(_T_1255, _T_1260) @[RegisterRouter.scala 62:24]
    node _T_1312_1 = _T_1261 @[RegisterRouter.scala 62:{24,24}]
    node _T_1247 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1252 = eq(_T_584, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1253 = or(_T_1247, _T_1252) @[RegisterRouter.scala 62:24]
    node _T_1312_0 = _T_1253 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_228 = validif(eq(UInt<1>("h0"), _T_1063), _T_1312_0) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_229 = mux(eq(UInt<1>("h1"), _T_1063), _T_1312_1, _GEN_228) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_230 = mux(eq(UInt<2>("h2"), _T_1063), _T_1312_2, _GEN_229) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_231 = mux(eq(UInt<2>("h3"), _T_1063), _T_1312_3, _GEN_230) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_232 = mux(eq(UInt<3>("h4"), _T_1063), _T_1312_4, _GEN_231) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_233 = mux(eq(UInt<3>("h5"), _T_1063), _T_1312_5, _GEN_232) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_234 = mux(eq(UInt<3>("h6"), _T_1063), _T_1312_6, _GEN_233) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_235 = mux(eq(UInt<3>("h7"), _T_1063), _T_1312_7, _GEN_234) @[RegisterRouter.scala 62:{24,24}]
    node _T_1312_T_1063 = _GEN_235 @[RegisterRouter.scala 62:24]
    node _T_1384 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1389 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1390 = or(_T_1384, _T_1389) @[RegisterRouter.scala 62:24]
    node _T_1393_7 = _T_1390 @[RegisterRouter.scala 62:{24,24}]
    node _T_1376 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1381 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1382 = or(_T_1376, _T_1381) @[RegisterRouter.scala 62:24]
    node _T_1393_6 = _T_1382 @[RegisterRouter.scala 62:{24,24}]
    node _T_1368 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1373 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1374 = or(_T_1368, _T_1373) @[RegisterRouter.scala 62:24]
    node _T_1393_5 = _T_1374 @[RegisterRouter.scala 62:{24,24}]
    node _T_1360 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1365 = eq(_T_620, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1366 = or(_T_1360, _T_1365) @[RegisterRouter.scala 62:24]
    node _T_1393_4 = _T_1366 @[RegisterRouter.scala 62:{24,24}]
    node _T_1352 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1357 = eq(_T_611, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1358 = or(_T_1352, _T_1357) @[RegisterRouter.scala 62:24]
    node _T_1393_3 = _T_1358 @[RegisterRouter.scala 62:{24,24}]
    node _T_1344 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1349 = eq(_T_602, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1350 = or(_T_1344, _T_1349) @[RegisterRouter.scala 62:24]
    node _T_1393_2 = _T_1350 @[RegisterRouter.scala 62:{24,24}]
    node _T_1336 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1341 = eq(_T_593, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1342 = or(_T_1336, _T_1341) @[RegisterRouter.scala 62:24]
    node _T_1393_1 = _T_1342 @[RegisterRouter.scala 62:{24,24}]
    node _T_1328 = UInt<1>("h1") @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1333 = eq(_T_584, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1334 = or(_T_1328, _T_1333) @[RegisterRouter.scala 62:24]
    node _T_1393_0 = _T_1334 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_236 = validif(eq(UInt<1>("h0"), _T_1063), _T_1393_0) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_237 = mux(eq(UInt<1>("h1"), _T_1063), _T_1393_1, _GEN_236) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_238 = mux(eq(UInt<2>("h2"), _T_1063), _T_1393_2, _GEN_237) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_239 = mux(eq(UInt<2>("h3"), _T_1063), _T_1393_3, _GEN_238) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_240 = mux(eq(UInt<3>("h4"), _T_1063), _T_1393_4, _GEN_239) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_241 = mux(eq(UInt<3>("h5"), _T_1063), _T_1393_5, _GEN_240) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_242 = mux(eq(UInt<3>("h6"), _T_1063), _T_1393_6, _GEN_241) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_243 = mux(eq(UInt<3>("h7"), _T_1063), _T_1393_7, _GEN_242) @[RegisterRouter.scala 62:{24,24}]
    node _T_1393_T_1063 = _GEN_243 @[RegisterRouter.scala 62:24]
    node _T_1409 = mux(_T_555_bits_read, _T_1312_T_1063, _T_1393_T_1063) @[RegisterRouter.scala 62:24]
    node _T_1412 = and(_T_548_ready, _T_1409) @[RegisterRouter.scala 62:24]
    node _T_555_ready = _T_1412 @[RegisterRouter.scala 62:{24,24}]
    node _T_1084 = and(_T_537_valid, _T_555_ready) @[RegisterRouter.scala 62:24]
    node _T_1085 = and(_T_1084, _T_555_bits_read) @[RegisterRouter.scala 62:24]
    node _T_1065 = dshl(UInt<1>("h1"), _T_1051) @[OneHot.scala 45:35]
    node _T_1066 = bits(_T_1065, 0, 0) @[RegisterRouter.scala 62:24]
    node _T_1088 = and(_T_1085, _T_1066) @[RegisterRouter.scala 62:24]
    node _T_1089 = and(_T_1088, _T_580) @[RegisterRouter.scala 62:24]
    node _T_624_0 = _T_1089 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_741 = and(_T_624_0, _T_729) @[RegisterRouter.scala 62:24]
    node _T_1244 = and(_T_555_valid, _T_548_ready) @[RegisterRouter.scala 62:24]
    node _T_1245 = and(_T_1244, _T_555_bits_read) @[RegisterRouter.scala 62:24]
    node _T_1076 = bits(_T_1075, 0, 0) @[RegisterRouter.scala 62:24]
    node _T_1248 = and(_T_1245, _T_1076) @[RegisterRouter.scala 62:24]
    node _T_1249 = and(_T_1248, _T_584) @[RegisterRouter.scala 62:24]
    node _T_650_0 = _T_1249 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_742 = and(_T_650_0, _T_736) @[RegisterRouter.scala 62:24]
    node _T_1163 = and(_T_537_valid, _T_555_ready) @[RegisterRouter.scala 62:24]
    node _T_1165 = eq(_T_555_bits_read, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1166 = and(_T_1163, _T_1165) @[RegisterRouter.scala 62:24]
    node _T_1169 = and(_T_1166, _T_1066) @[RegisterRouter.scala 62:24]
    node _T_1170 = and(_T_1169, _T_580) @[RegisterRouter.scala 62:24]
    node _T_637_0 = _T_1170 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_743 = and(_T_637_0, _T_733) @[RegisterRouter.scala 62:24]
    node _T_1329 = and(_T_1326, _T_1076) @[RegisterRouter.scala 62:24]
    node _T_1330 = and(_T_1329, _T_584) @[RegisterRouter.scala 62:24]
    node _T_663_0 = _T_1330 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_744 = and(_T_663_0, _T_740) @[RegisterRouter.scala 62:24]
    node _T_747 = bits(_T_555_bits_data, 7, 0) @[RegisterRouter.scala 62:24]
    node _GEN_204 = mux(_T_744, _T_747, prescaler_lo) @[I2C.scala 109:25 RegField.scala 135:{88,92}]
    node _T_750 = and(_T_741, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_751 = and(UInt<1>("h1"), _T_742) @[RegisterRouter.scala 62:24]
    node _T_752 = and(_T_743, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_753 = and(UInt<1>("h1"), _T_744) @[RegisterRouter.scala 62:24]
    node _T_755 = eq(_T_729, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_758 = eq(_T_733, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_761 = eq(_T_736, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_764 = eq(_T_740, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_766 = shl(prescaler_lo, 0) @[RegisterRouter.scala 62:24]
    node _T_768 = not(UInt<8>("h0")) @[RegisterRouter.scala 62:24]
    node _T_769 = and(_T_766, _T_768) @[RegisterRouter.scala 62:24]
    node _T_770 = or(UInt<1>("h0"), _T_769) @[RegisterRouter.scala 62:24]
    node _T_771 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_773 = neq(_T_771, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_774 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_775 = not(_T_774) @[RegisterRouter.scala 62:24]
    node _T_777 = eq(_T_775, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_778 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_780 = neq(_T_778, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_781 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_782 = not(_T_781) @[RegisterRouter.scala 62:24]
    node _T_784 = eq(_T_782, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1067 = bits(_T_1065, 1, 1) @[RegisterRouter.scala 62:24]
    node _T_1096 = and(_T_1085, _T_1067) @[RegisterRouter.scala 62:24]
    node _T_1097 = and(_T_1096, _T_589) @[RegisterRouter.scala 62:24]
    node _T_624_1 = _T_1097 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_785 = and(_T_624_1, _T_773) @[RegisterRouter.scala 62:24]
    node _T_1077 = bits(_T_1075, 1, 1) @[RegisterRouter.scala 62:24]
    node _T_1256 = and(_T_1245, _T_1077) @[RegisterRouter.scala 62:24]
    node _T_1257 = and(_T_1256, _T_593) @[RegisterRouter.scala 62:24]
    node _T_650_1 = _T_1257 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_786 = and(_T_650_1, _T_780) @[RegisterRouter.scala 62:24]
    node _T_1177 = and(_T_1166, _T_1067) @[RegisterRouter.scala 62:24]
    node _T_1178 = and(_T_1177, _T_589) @[RegisterRouter.scala 62:24]
    node _T_637_1 = _T_1178 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_787 = and(_T_637_1, _T_777) @[RegisterRouter.scala 62:24]
    node _T_1337 = and(_T_1326, _T_1077) @[RegisterRouter.scala 62:24]
    node _T_1338 = and(_T_1337, _T_593) @[RegisterRouter.scala 62:24]
    node _T_663_1 = _T_1338 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_788 = and(_T_663_1, _T_784) @[RegisterRouter.scala 62:24]
    node _T_791 = bits(_T_555_bits_data, 7, 0) @[RegisterRouter.scala 62:24]
    node _GEN_205 = mux(_T_788, _T_791, prescaler_hi) @[I2C.scala 109:25 RegField.scala 135:{88,92}]
    node _T_794 = and(_T_785, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_795 = and(UInt<1>("h1"), _T_786) @[RegisterRouter.scala 62:24]
    node _T_796 = and(_T_787, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_797 = and(UInt<1>("h1"), _T_788) @[RegisterRouter.scala 62:24]
    node _T_799 = eq(_T_773, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_802 = eq(_T_777, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_805 = eq(_T_780, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_808 = eq(_T_784, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_810 = shl(prescaler_hi, 0) @[RegisterRouter.scala 62:24]
    node _T_812 = not(UInt<8>("h0")) @[RegisterRouter.scala 62:24]
    node _T_813 = and(_T_810, _T_812) @[RegisterRouter.scala 62:24]
    node _T_814 = or(UInt<1>("h0"), _T_813) @[RegisterRouter.scala 62:24]
    node _T_815 = bits(_T_703, 5, 0) @[RegisterRouter.scala 62:24]
    node _T_817 = neq(_T_815, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_818 = bits(_T_703, 5, 0) @[RegisterRouter.scala 62:24]
    node _T_819 = not(_T_818) @[RegisterRouter.scala 62:24]
    node _T_821 = eq(_T_819, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_822 = bits(_T_726, 5, 0) @[RegisterRouter.scala 62:24]
    node _T_824 = neq(_T_822, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_825 = bits(_T_726, 5, 0) @[RegisterRouter.scala 62:24]
    node _T_826 = not(_T_825) @[RegisterRouter.scala 62:24]
    node _T_828 = eq(_T_826, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1068 = bits(_T_1065, 2, 2) @[RegisterRouter.scala 62:24]
    node _T_1104 = and(_T_1085, _T_1068) @[RegisterRouter.scala 62:24]
    node _T_1105 = and(_T_1104, _T_598) @[RegisterRouter.scala 62:24]
    node _T_624_2 = _T_1105 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_829 = and(_T_624_2, _T_817) @[RegisterRouter.scala 62:24]
    node _T_1078 = bits(_T_1075, 2, 2) @[RegisterRouter.scala 62:24]
    node _T_1264 = and(_T_1245, _T_1078) @[RegisterRouter.scala 62:24]
    node _T_1265 = and(_T_1264, _T_602) @[RegisterRouter.scala 62:24]
    node _T_650_2 = _T_1265 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_830 = and(_T_650_2, _T_824) @[RegisterRouter.scala 62:24]
    node _T_1185 = and(_T_1166, _T_1068) @[RegisterRouter.scala 62:24]
    node _T_1186 = and(_T_1185, _T_598) @[RegisterRouter.scala 62:24]
    node _T_637_2 = _T_1186 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_831 = and(_T_637_2, _T_821) @[RegisterRouter.scala 62:24]
    node _T_1345 = and(_T_1326, _T_1078) @[RegisterRouter.scala 62:24]
    node _T_1346 = and(_T_1345, _T_602) @[RegisterRouter.scala 62:24]
    node _T_663_2 = _T_1346 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_832 = and(_T_663_2, _T_828) @[RegisterRouter.scala 62:24]
    node _T_835 = bits(_T_555_bits_data, 5, 0) @[RegisterRouter.scala 62:24]
    node _GEN_206 = mux(_T_832, _T_835, control_reserved) @[I2C.scala 110:25 RegField.scala 135:{88,92}]
    node _T_838 = and(_T_829, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_839 = and(UInt<1>("h1"), _T_830) @[RegisterRouter.scala 62:24]
    node _T_840 = and(_T_831, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_841 = and(UInt<1>("h1"), _T_832) @[RegisterRouter.scala 62:24]
    node _T_843 = eq(_T_817, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_846 = eq(_T_821, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_849 = eq(_T_824, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_852 = eq(_T_828, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_854 = shl(control_reserved, 0) @[RegisterRouter.scala 62:24]
    node _T_856 = not(UInt<6>("h0")) @[RegisterRouter.scala 62:24]
    node _T_857 = and(_T_854, _T_856) @[RegisterRouter.scala 62:24]
    node _T_858 = or(UInt<1>("h0"), _T_857) @[RegisterRouter.scala 62:24]
    node _T_859 = bits(_T_703, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_861 = neq(_T_859, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_862 = bits(_T_703, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_863 = not(_T_862) @[RegisterRouter.scala 62:24]
    node _T_865 = eq(_T_863, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_866 = bits(_T_726, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_868 = neq(_T_866, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_869 = bits(_T_726, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_870 = not(_T_869) @[RegisterRouter.scala 62:24]
    node _T_872 = eq(_T_870, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_624_3 = _T_1105 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_873 = and(_T_624_3, _T_861) @[RegisterRouter.scala 62:24]
    node _T_650_3 = _T_1265 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_874 = and(_T_650_3, _T_868) @[RegisterRouter.scala 62:24]
    node _T_637_3 = _T_1186 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_875 = and(_T_637_3, _T_865) @[RegisterRouter.scala 62:24]
    node _T_663_3 = _T_1346 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_876 = and(_T_663_3, _T_872) @[RegisterRouter.scala 62:24]
    node _T_879 = bits(_T_555_bits_data, 6, 6) @[RegisterRouter.scala 62:24]
    node _GEN_207 = mux(_T_876, _T_879, control_intEn) @[I2C.scala 110:25 RegField.scala 135:{88,92}]
    node _T_882 = and(_T_873, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_883 = and(UInt<1>("h1"), _T_874) @[RegisterRouter.scala 62:24]
    node _T_884 = and(_T_875, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_885 = and(UInt<1>("h1"), _T_876) @[RegisterRouter.scala 62:24]
    node _T_887 = eq(_T_861, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_890 = eq(_T_865, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_893 = eq(_T_868, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_896 = eq(_T_872, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_898 = shl(control_intEn, 6) @[RegisterRouter.scala 62:24]
    node _T_900 = not(UInt<7>("h0")) @[RegisterRouter.scala 62:24]
    node _T_901 = and(_T_898, _T_900) @[RegisterRouter.scala 62:24]
    node _T_902 = or(_T_858, _T_901) @[RegisterRouter.scala 62:24]
    node _T_903 = bits(_T_703, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_905 = neq(_T_903, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_906 = bits(_T_703, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_907 = not(_T_906) @[RegisterRouter.scala 62:24]
    node _T_909 = eq(_T_907, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_910 = bits(_T_726, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_912 = neq(_T_910, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_913 = bits(_T_726, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_914 = not(_T_913) @[RegisterRouter.scala 62:24]
    node _T_916 = eq(_T_914, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_624_4 = _T_1105 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_917 = and(_T_624_4, _T_905) @[RegisterRouter.scala 62:24]
    node _T_650_4 = _T_1265 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_918 = and(_T_650_4, _T_912) @[RegisterRouter.scala 62:24]
    node _T_637_4 = _T_1186 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_919 = and(_T_637_4, _T_909) @[RegisterRouter.scala 62:24]
    node _T_663_4 = _T_1346 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_920 = and(_T_663_4, _T_916) @[RegisterRouter.scala 62:24]
    node _T_923 = bits(_T_555_bits_data, 7, 7) @[RegisterRouter.scala 62:24]
    node _GEN_208 = mux(_T_920, _T_923, control_coreEn) @[I2C.scala 110:25 RegField.scala 135:{88,92}]
    node _T_926 = and(_T_917, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_927 = and(UInt<1>("h1"), _T_918) @[RegisterRouter.scala 62:24]
    node _T_928 = and(_T_919, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_929 = and(UInt<1>("h1"), _T_920) @[RegisterRouter.scala 62:24]
    node _T_931 = eq(_T_905, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_934 = eq(_T_909, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_937 = eq(_T_912, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_940 = eq(_T_916, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_942 = shl(control_coreEn, 7) @[RegisterRouter.scala 62:24]
    node _T_944 = not(UInt<8>("h0")) @[RegisterRouter.scala 62:24]
    node _T_945 = and(_T_942, _T_944) @[RegisterRouter.scala 62:24]
    node _T_946 = or(_T_902, _T_945) @[RegisterRouter.scala 62:24]
    node _T_947 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_949 = neq(_T_947, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_950 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_951 = not(_T_950) @[RegisterRouter.scala 62:24]
    node _T_953 = eq(_T_951, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_954 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_956 = neq(_T_954, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_957 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_958 = not(_T_957) @[RegisterRouter.scala 62:24]
    node _T_960 = eq(_T_958, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1069 = bits(_T_1065, 3, 3) @[RegisterRouter.scala 62:24]
    node _T_1112 = and(_T_1085, _T_1069) @[RegisterRouter.scala 62:24]
    node _T_1113 = and(_T_1112, _T_607) @[RegisterRouter.scala 62:24]
    node _T_624_5 = _T_1113 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_961 = and(_T_624_5, _T_949) @[RegisterRouter.scala 62:24]
    node _T_1079 = bits(_T_1075, 3, 3) @[RegisterRouter.scala 62:24]
    node _T_1272 = and(_T_1245, _T_1079) @[RegisterRouter.scala 62:24]
    node _T_1273 = and(_T_1272, _T_611) @[RegisterRouter.scala 62:24]
    node _T_650_5 = _T_1273 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_962 = and(_T_650_5, _T_956) @[RegisterRouter.scala 62:24]
    node _T_1193 = and(_T_1166, _T_1069) @[RegisterRouter.scala 62:24]
    node _T_1194 = and(_T_1193, _T_607) @[RegisterRouter.scala 62:24]
    node _T_637_5 = _T_1194 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_963 = and(_T_637_5, _T_953) @[RegisterRouter.scala 62:24]
    node _T_1353 = and(_T_1326, _T_1079) @[RegisterRouter.scala 62:24]
    node _T_1354 = and(_T_1353, _T_611) @[RegisterRouter.scala 62:24]
    node _T_663_5 = _T_1354 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_964 = and(_T_663_5, _T_960) @[RegisterRouter.scala 62:24]
    node _T_967 = bits(_T_555_bits_data, 7, 0) @[RegisterRouter.scala 62:24]
    node _GEN_209 = mux(_T_964, _T_967, transmitData) @[I2C.scala 111:25 RegField.scala 135:{88,92}]
    node _T_970 = and(_T_961, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_971 = and(UInt<1>("h1"), _T_962) @[RegisterRouter.scala 62:24]
    node _T_972 = and(_T_963, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_973 = and(UInt<1>("h1"), _T_964) @[RegisterRouter.scala 62:24]
    node _T_975 = eq(_T_949, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_978 = eq(_T_953, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_981 = eq(_T_956, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_984 = eq(_T_960, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_986 = shl(receivedData, 0) @[RegisterRouter.scala 62:24]
    node _T_988 = not(UInt<8>("h0")) @[RegisterRouter.scala 62:24]
    node _T_989 = and(_T_986, _T_988) @[RegisterRouter.scala 62:24]
    node _T_990 = or(UInt<1>("h0"), _T_989) @[RegisterRouter.scala 62:24]
    node _T_991 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_993 = neq(_T_991, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_994 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_995 = not(_T_994) @[RegisterRouter.scala 62:24]
    node _T_997 = eq(_T_995, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1070 = bits(_T_1065, 4, 4) @[RegisterRouter.scala 62:24]
    node _T_1120 = and(_T_1085, _T_1070) @[RegisterRouter.scala 62:24]
    node _T_1121 = and(_T_1120, _T_616) @[RegisterRouter.scala 62:24]
    node _T_624_6 = _T_1121 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1005 = and(_T_624_6, _T_993) @[RegisterRouter.scala 62:24]
    node _T_1280 = and(_T_1245, _T_1080) @[RegisterRouter.scala 62:24]
    node _T_1281 = and(_T_1280, _T_620) @[RegisterRouter.scala 62:24]
    node _T_650_6 = _T_1281 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1006 = and(_T_650_6, _T_1000) @[RegisterRouter.scala 62:24]
    node _T_1201 = and(_T_1166, _T_1070) @[RegisterRouter.scala 62:24]
    node _T_1202 = and(_T_1201, _T_616) @[RegisterRouter.scala 62:24]
    node _T_637_6 = _T_1202 @[RegisterRouter.scala 62:24 ReduceOthers.scala 39:69]
    node _T_1007 = and(_T_637_6, _T_997) @[RegisterRouter.scala 62:24]
    node _T_1009 = cat(status_reserved, status_transferInProgress) @[I2C.scala 535:89]
    node _T_1010 = cat(_T_1009, status_irqFlag) @[I2C.scala 535:89]
    node _T_1011 = cat(status_receivedAck, status_busy) @[I2C.scala 535:89]
    node _T_1012 = cat(_T_1011, status_arbLost) @[I2C.scala 535:89]
    node _T_1013 = cat(_T_1012, _T_1010) @[I2C.scala 535:89]
    node _GEN_210 = mux(_T_1008, UInt<1>("h0"), _GEN_203) @[I2C.scala 538:77 539:82]
    node _T_1019 = and(_T_1005, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1020 = and(statusReadReady, _T_1006) @[RegisterRouter.scala 62:24]
    node _T_1021 = and(_T_1007, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1022 = and(UInt<1>("h1"), _T_1008) @[RegisterRouter.scala 62:24]
    node _T_1024 = eq(_T_993, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1027 = eq(_T_997, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1033 = eq(_T_1004, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1035 = shl(_T_1013, 0) @[RegisterRouter.scala 62:24]
    node _T_1037 = not(UInt<8>("h0")) @[RegisterRouter.scala 62:24]
    node _T_1038 = and(_T_1035, _T_1037) @[RegisterRouter.scala 62:24]
    node _T_1039 = or(UInt<1>("h0"), _T_1038) @[RegisterRouter.scala 62:24]
    node _T_1043 = bits(_T_555_bits_index, 3, 3) @[RegisterRouter.scala 62:24]
    node _T_1044 = bits(_T_555_bits_index, 4, 4) @[RegisterRouter.scala 62:24]
    node _T_1045 = bits(_T_555_bits_index, 5, 5) @[RegisterRouter.scala 62:24]
    node _T_1046 = bits(_T_555_bits_index, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_1047 = bits(_T_555_bits_index, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_1048 = bits(_T_555_bits_index, 8, 8) @[RegisterRouter.scala 62:24]
    node _T_1049 = bits(_T_555_bits_index, 9, 9) @[RegisterRouter.scala 62:24]
    node _T_1055 = bits(_T_555_bits_index, 3, 3) @[RegisterRouter.scala 62:24]
    node _T_1056 = bits(_T_555_bits_index, 4, 4) @[RegisterRouter.scala 62:24]
    node _T_1057 = bits(_T_555_bits_index, 5, 5) @[RegisterRouter.scala 62:24]
    node _T_1058 = bits(_T_555_bits_index, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_1059 = bits(_T_555_bits_index, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_1060 = bits(_T_555_bits_index, 8, 8) @[RegisterRouter.scala 62:24]
    node _T_1061 = bits(_T_555_bits_index, 9, 9) @[RegisterRouter.scala 62:24]
    node _T_1071 = bits(_T_1065, 5, 5) @[RegisterRouter.scala 62:24]
    node _T_1072 = bits(_T_1065, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_1073 = bits(_T_1065, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_1081 = bits(_T_1075, 5, 5) @[RegisterRouter.scala 62:24]
    node _T_1082 = bits(_T_1075, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_1083 = bits(_T_1075, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_1128 = and(_T_1085, _T_1071) @[RegisterRouter.scala 62:24]
    node _T_1129 = and(_T_1128, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1136 = and(_T_1085, _T_1072) @[RegisterRouter.scala 62:24]
    node _T_1137 = and(_T_1136, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1144 = and(_T_1085, _T_1073) @[RegisterRouter.scala 62:24]
    node _T_1145 = and(_T_1144, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1209 = and(_T_1166, _T_1071) @[RegisterRouter.scala 62:24]
    node _T_1210 = and(_T_1209, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1217 = and(_T_1166, _T_1072) @[RegisterRouter.scala 62:24]
    node _T_1218 = and(_T_1217, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1225 = and(_T_1166, _T_1073) @[RegisterRouter.scala 62:24]
    node _T_1226 = and(_T_1225, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1282 = and(_T_1281, _T_1031) @[ReduceOthers.scala 47:21]
    node _T_1288 = and(_T_1245, _T_1081) @[RegisterRouter.scala 62:24]
    node _T_1289 = and(_T_1288, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1296 = and(_T_1245, _T_1082) @[RegisterRouter.scala 62:24]
    node _T_1297 = and(_T_1296, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1304 = and(_T_1245, _T_1083) @[RegisterRouter.scala 62:24]
    node _T_1305 = and(_T_1304, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1369 = and(_T_1326, _T_1081) @[RegisterRouter.scala 62:24]
    node _T_1370 = and(_T_1369, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1377 = and(_T_1326, _T_1082) @[RegisterRouter.scala 62:24]
    node _T_1378 = and(_T_1377, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1385 = and(_T_1326, _T_1083) @[RegisterRouter.scala 62:24]
    node _T_1386 = and(_T_1385, UInt<1>("h1")) @[RegisterRouter.scala 62:24]
    node _T_1410 = and(_T_555_ready, _T_1406) @[RegisterRouter.scala 62:24]
    node _T_1413 = and(_T_555_valid, _T_1409) @[RegisterRouter.scala 62:24]
    node _T_1416_0 = _T_584 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_244 = validif(eq(UInt<1>("h0"), _T_1063), _T_1416_0) @[RegisterRouter.scala 62:{24,24}]
    node _T_1416_1 = _T_593 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_245 = mux(eq(UInt<1>("h1"), _T_1063), _T_1416_1, _GEN_244) @[RegisterRouter.scala 62:{24,24}]
    node _T_1416_2 = _T_602 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_246 = mux(eq(UInt<2>("h2"), _T_1063), _T_1416_2, _GEN_245) @[RegisterRouter.scala 62:{24,24}]
    node _T_1416_3 = _T_611 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_247 = mux(eq(UInt<2>("h3"), _T_1063), _T_1416_3, _GEN_246) @[RegisterRouter.scala 62:{24,24}]
    node _T_1416_4 = _T_620 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_248 = mux(eq(UInt<3>("h4"), _T_1063), _T_1416_4, _GEN_247) @[RegisterRouter.scala 62:{24,24}]
    node _T_1416_5 = UInt<1>("h1") @[RegisterRouter.scala 62:{24,24}]
    node _GEN_249 = mux(eq(UInt<3>("h5"), _T_1063), _T_1416_5, _GEN_248) @[RegisterRouter.scala 62:{24,24}]
    node _T_1416_6 = UInt<1>("h1") @[RegisterRouter.scala 62:{24,24}]
    node _GEN_250 = mux(eq(UInt<3>("h6"), _T_1063), _T_1416_6, _GEN_249) @[RegisterRouter.scala 62:{24,24}]
    node _T_1416_7 = UInt<1>("h1") @[RegisterRouter.scala 62:{24,24}]
    node _GEN_251 = mux(eq(UInt<3>("h7"), _T_1063), _T_1416_7, _GEN_250) @[RegisterRouter.scala 62:{24,24}]
    node _T_1430_0 = _T_770 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_252 = validif(eq(UInt<1>("h0"), _T_1063), _T_1430_0) @[RegisterRouter.scala 62:{24,24}]
    node _T_1430_1 = _T_814 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_253 = mux(eq(UInt<1>("h1"), _T_1063), _T_1430_1, _GEN_252) @[RegisterRouter.scala 62:{24,24}]
    node _T_1430_2 = _T_946 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_254 = mux(eq(UInt<2>("h2"), _T_1063), _T_1430_2, _GEN_253) @[RegisterRouter.scala 62:{24,24}]
    node _T_1430_3 = _T_990 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_255 = mux(eq(UInt<2>("h3"), _T_1063), _T_1430_3, _GEN_254) @[RegisterRouter.scala 62:{24,24}]
    node _T_1430_4 = _T_1039 @[RegisterRouter.scala 62:{24,24}]
    node _GEN_256 = mux(eq(UInt<3>("h4"), _T_1063), _T_1430_4, _GEN_255) @[RegisterRouter.scala 62:{24,24}]
    node _T_1430_5 = pad(UInt<1>("h0"), 8) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_257 = mux(eq(UInt<3>("h5"), _T_1063), _T_1430_5, _GEN_256) @[RegisterRouter.scala 62:{24,24}]
    node _T_1430_6 = pad(UInt<1>("h0"), 8) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_258 = mux(eq(UInt<3>("h6"), _T_1063), _T_1430_6, _GEN_257) @[RegisterRouter.scala 62:{24,24}]
    node _T_1430_7 = pad(UInt<1>("h0"), 8) @[RegisterRouter.scala 62:{24,24}]
    node _GEN_259 = mux(eq(UInt<3>("h7"), _T_1063), _T_1430_7, _GEN_258) @[RegisterRouter.scala 62:{24,24}]
    node _T_1416_T_1063 = _GEN_251 @[RegisterRouter.scala 62:24]
    node _T_1430_T_1063 = _GEN_259 @[RegisterRouter.scala 62:24]
    node _T_1443 = mux(_T_1416_T_1063, _T_1430_T_1063, UInt<1>("h0")) @[RegisterRouter.scala 62:24]
    node _T_537_bits_extra = _T_543 @[RegisterRouter.scala 54:18 59:19]
    node _T_555_bits_extra = _T_537_bits_extra @[RegisterRouter.scala 62:{24,24}]
    node _T_548_bits_extra = _T_555_bits_extra @[RegisterRouter.scala 62:{24,24}]
    node _T_1444 = bits(_T_548_bits_extra, 8, 2) @[RegisterRouter.scala 72:35]
    node _T_1445 = bits(_T_548_bits_extra, 1, 0) @[RegisterRouter.scala 73:35]
    node _T_548_bits_read = _T_555_bits_read @[RegisterRouter.scala 62:{24,24}]
    node _T_1455 = mux(_T_548_bits_read, UInt<1>("h1"), UInt<1>("h0")) @[RegisterRouter.scala 77:25]
    node _T_1462 = and(status_irqFlag, control_intEn) @[I2C.scala 552:35]
    node _T_537_ready = _T_1410 @[RegisterRouter.scala 54:18 62:24]
    node _T_26_a_ready = _T_537_ready @[Nodes.scala 329:76 RegisterRouter.scala 66:15]
    node _T_26_a_bits_param = auto_in_a_bits_param @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_26_b_ready = auto_in_b_ready @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_26_b_valid = UInt<1>("h0") @[Nodes.scala 329:76 RegisterRouter.scala 80:22]
    node _T_26_b_bits_opcode = validif(UInt<1>("h0"), UInt<3>("h0"))
    node _T_26_b_bits_param = validif(UInt<1>("h0"), UInt<2>("h0"))
    node _T_26_b_bits_size = validif(UInt<1>("h0"), UInt<2>("h0"))
    node _T_26_b_bits_source = validif(UInt<1>("h0"), UInt<7>("h0"))
    node _T_26_b_bits_address = validif(UInt<1>("h0"), UInt<29>("h0"))
    node _T_26_b_bits_mask = validif(UInt<1>("h0"), UInt<4>("h0"))
    node _T_26_b_bits_data = validif(UInt<1>("h0"), UInt<32>("h0"))
    node _T_26_c_ready = UInt<1>("h1") @[Nodes.scala 329:76 RegisterRouter.scala 81:22]
    node _T_26_c_valid = auto_in_c_valid @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_26_c_bits_opcode = auto_in_c_bits_opcode @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_26_c_bits_param = auto_in_c_bits_param @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_26_c_bits_size = auto_in_c_bits_size @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_26_c_bits_source = auto_in_c_bits_source @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_26_c_bits_address = auto_in_c_bits_address @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_26_c_bits_data = auto_in_c_bits_data @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_26_c_bits_error = auto_in_c_bits_error @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_548_valid = _T_1413 @[RegisterRouter.scala 62:{24,24}]
    node _T_26_d_valid = _T_548_valid @[Nodes.scala 329:76 RegisterRouter.scala 67:15]
    node _T_26_d_bits_opcode = pad(_T_1455, 3) @[Nodes.scala 329:76 RegisterRouter.scala 77:19]
    node _T_1448_param = pad(UInt<1>("h0"), 2) @[Edges.scala 646:17 648:15]
    node _T_26_d_bits_param = _T_1448_param @[Nodes.scala 329:76 RegisterRouter.scala 71:12]
    node _T_1448_size = _T_1445 @[Edges.scala 646:17 649:15]
    node _T_26_d_bits_size = _T_1448_size @[Nodes.scala 329:76 RegisterRouter.scala 71:12]
    node _T_1448_source = _T_1444 @[Edges.scala 646:17 650:15]
    node _T_26_d_bits_source = _T_1448_source @[Nodes.scala 329:76 RegisterRouter.scala 71:12]
    node _T_1448_sink = UInt<1>("h0") @[Edges.scala 646:17 651:15]
    node _T_26_d_bits_sink = _T_1448_sink @[Nodes.scala 329:76 RegisterRouter.scala 71:12]
    node _T_548_bits_data = pad(_T_1443, 32) @[RegisterRouter.scala 62:{24,24}]
    node _T_26_d_bits_data = _T_548_bits_data @[Nodes.scala 329:76 RegisterRouter.scala 76:17]
    node _T_1448_error = UInt<1>("h0") @[Edges.scala 646:17 653:15]
    node _T_26_d_bits_error = _T_1448_error @[Nodes.scala 329:76 RegisterRouter.scala 71:12]
    node _T_26_e_ready = UInt<1>("h1") @[Nodes.scala 329:76 RegisterRouter.scala 82:22]
    node _T_26_e_valid = auto_in_e_valid @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_26_e_bits_sink = auto_in_e_bits_sink @[LazyModule.scala 171:31 Nodes.scala 329:76]
    node _T_61_ready = _T_26_a_ready @[Bundles.scala 214:19 215:15]
    node _T_54_a_ready = _T_61_ready @[Bundles.scala 234:19 235:11]
    node _T_61_valid = _T_26_a_valid @[Bundles.scala 214:19 216:15]
    node _T_54_a_valid = _T_61_valid @[Bundles.scala 234:19 235:11]
    node _T_61_bits_opcode = _T_26_a_bits_opcode @[Bundles.scala 214:19 217:15]
    node _T_54_a_bits_opcode = _T_61_bits_opcode @[Bundles.scala 234:19 235:11]
    node _T_61_bits_param = _T_26_a_bits_param @[Bundles.scala 214:19 217:15]
    node _T_54_a_bits_param = _T_61_bits_param @[Bundles.scala 234:19 235:11]
    node _T_61_bits_size = _T_26_a_bits_size @[Bundles.scala 214:19 217:15]
    node _T_54_a_bits_size = _T_61_bits_size @[Bundles.scala 234:19 235:11]
    node _T_61_bits_source = _T_26_a_bits_source @[Bundles.scala 214:19 217:15]
    node _T_54_a_bits_source = _T_61_bits_source @[Bundles.scala 234:19 235:11]
    node _T_61_bits_address = _T_26_a_bits_address @[Bundles.scala 214:19 217:15]
    node _T_54_a_bits_address = _T_61_bits_address @[Bundles.scala 234:19 235:11]
    node _T_61_bits_mask = _T_26_a_bits_mask @[Bundles.scala 214:19 217:15]
    node _T_54_a_bits_mask = _T_61_bits_mask @[Bundles.scala 234:19 235:11]
    node _T_61_bits_data = _T_26_a_bits_data @[Bundles.scala 214:19 217:15]
    node _T_54_a_bits_data = _T_61_bits_data @[Bundles.scala 234:19 235:11]
    node _T_63_ready = _T_26_b_ready @[Bundles.scala 214:19 215:15]
    node _T_54_b_ready = _T_63_ready @[Bundles.scala 234:19 236:11]
    node _T_63_valid = _T_26_b_valid @[Bundles.scala 214:19 216:15]
    node _T_54_b_valid = _T_63_valid @[Bundles.scala 234:19 236:11]
    node _T_63_bits_opcode = _T_26_b_bits_opcode @[Bundles.scala 214:19 217:15]
    node _T_54_b_bits_opcode = _T_63_bits_opcode @[Bundles.scala 234:19 236:11]
    node _T_63_bits_param = _T_26_b_bits_param @[Bundles.scala 214:19 217:15]
    node _T_54_b_bits_param = _T_63_bits_param @[Bundles.scala 234:19 236:11]
    node _T_63_bits_size = _T_26_b_bits_size @[Bundles.scala 214:19 217:15]
    node _T_54_b_bits_size = _T_63_bits_size @[Bundles.scala 234:19 236:11]
    node _T_63_bits_source = _T_26_b_bits_source @[Bundles.scala 214:19 217:15]
    node _T_54_b_bits_source = _T_63_bits_source @[Bundles.scala 234:19 236:11]
    node _T_63_bits_address = _T_26_b_bits_address @[Bundles.scala 214:19 217:15]
    node _T_54_b_bits_address = _T_63_bits_address @[Bundles.scala 234:19 236:11]
    node _T_63_bits_mask = _T_26_b_bits_mask @[Bundles.scala 214:19 217:15]
    node _T_54_b_bits_mask = _T_63_bits_mask @[Bundles.scala 234:19 236:11]
    node _T_63_bits_data = _T_26_b_bits_data @[Bundles.scala 214:19 217:15]
    node _T_54_b_bits_data = _T_63_bits_data @[Bundles.scala 234:19 236:11]
    node _T_65_ready = _T_26_c_ready @[Bundles.scala 214:19 215:15]
    node _T_54_c_ready = _T_65_ready @[Bundles.scala 234:19 237:11]
    node _T_65_valid = _T_26_c_valid @[Bundles.scala 214:19 216:15]
    node _T_54_c_valid = _T_65_valid @[Bundles.scala 234:19 237:11]
    node _T_65_bits_opcode = _T_26_c_bits_opcode @[Bundles.scala 214:19 217:15]
    node _T_54_c_bits_opcode = _T_65_bits_opcode @[Bundles.scala 234:19 237:11]
    node _T_65_bits_param = _T_26_c_bits_param @[Bundles.scala 214:19 217:15]
    node _T_54_c_bits_param = _T_65_bits_param @[Bundles.scala 234:19 237:11]
    node _T_65_bits_size = _T_26_c_bits_size @[Bundles.scala 214:19 217:15]
    node _T_54_c_bits_size = _T_65_bits_size @[Bundles.scala 234:19 237:11]
    node _T_65_bits_source = _T_26_c_bits_source @[Bundles.scala 214:19 217:15]
    node _T_54_c_bits_source = _T_65_bits_source @[Bundles.scala 234:19 237:11]
    node _T_65_bits_address = _T_26_c_bits_address @[Bundles.scala 214:19 217:15]
    node _T_54_c_bits_address = _T_65_bits_address @[Bundles.scala 234:19 237:11]
    node _T_65_bits_data = _T_26_c_bits_data @[Bundles.scala 214:19 217:15]
    node _T_54_c_bits_data = _T_65_bits_data @[Bundles.scala 234:19 237:11]
    node _T_65_bits_error = _T_26_c_bits_error @[Bundles.scala 214:19 217:15]
    node _T_54_c_bits_error = _T_65_bits_error @[Bundles.scala 234:19 237:11]
    node _T_67_ready = _T_26_d_ready @[Bundles.scala 214:19 215:15]
    node _T_54_d_ready = _T_67_ready @[Bundles.scala 234:19 238:11]
    node _T_67_valid = _T_26_d_valid @[Bundles.scala 214:19 216:15]
    node _T_54_d_valid = _T_67_valid @[Bundles.scala 234:19 238:11]
    node _T_67_bits_opcode = _T_26_d_bits_opcode @[Bundles.scala 214:19 217:15]
    node _T_54_d_bits_opcode = _T_67_bits_opcode @[Bundles.scala 234:19 238:11]
    node _T_67_bits_param = _T_26_d_bits_param @[Bundles.scala 214:19 217:15]
    node _T_54_d_bits_param = _T_67_bits_param @[Bundles.scala 234:19 238:11]
    node _T_67_bits_size = _T_26_d_bits_size @[Bundles.scala 214:19 217:15]
    node _T_54_d_bits_size = _T_67_bits_size @[Bundles.scala 234:19 238:11]
    node _T_67_bits_source = _T_26_d_bits_source @[Bundles.scala 214:19 217:15]
    node _T_54_d_bits_source = _T_67_bits_source @[Bundles.scala 234:19 238:11]
    node _T_67_bits_sink = _T_26_d_bits_sink @[Bundles.scala 214:19 217:15]
    node _T_54_d_bits_sink = _T_67_bits_sink @[Bundles.scala 234:19 238:11]
    node _T_67_bits_data = _T_26_d_bits_data @[Bundles.scala 214:19 217:15]
    node _T_54_d_bits_data = _T_67_bits_data @[Bundles.scala 234:19 238:11]
    node _T_67_bits_error = _T_26_d_bits_error @[Bundles.scala 214:19 217:15]
    node _T_54_d_bits_error = _T_67_bits_error @[Bundles.scala 234:19 238:11]
    node _T_69_ready = _T_26_e_ready @[Bundles.scala 214:19 215:15]
    node _T_54_e_ready = _T_69_ready @[Bundles.scala 234:19 239:11]
    node _T_69_valid = _T_26_e_valid @[Bundles.scala 214:19 216:15]
    node _T_54_e_valid = _T_69_valid @[Bundles.scala 234:19 239:11]
    node _T_69_bits_sink = _T_26_e_bits_sink @[Bundles.scala 214:19 217:15]
    node _T_54_e_bits_sink = _T_69_bits_sink @[Bundles.scala 234:19 239:11]
    node interrupts_0 = _T_1462 @[Nodes.scala 328:76 I2C.scala 552:17]
    node _T_182_hi = _T_186 @[I2C.scala 109:{63,63}]
    node _T_182_lo = _T_185 @[I2C.scala 109:{63,63}]
    node _T_191_coreEn = _T_196 @[I2C.scala 110:{61,61}]
    node _T_191_intEn = _T_195 @[I2C.scala 110:{61,61}]
    node _T_191_reserved = _T_194 @[I2C.scala 110:{61,61}]
    node _T_205_start = _T_214 @[I2C.scala 113:{61,61}]
    node _T_205_stop = _T_213 @[I2C.scala 113:{61,61}]
    node _T_205_read = _T_212 @[I2C.scala 113:{61,61}]
    node _T_205_write = _T_211 @[I2C.scala 113:{61,61}]
    node _T_205_ack = _T_210 @[I2C.scala 113:{61,61}]
    node _T_205_reserved = _T_209 @[I2C.scala 113:{61,61}]
    node _T_205_irqAck = _T_208 @[I2C.scala 113:{61,61}]
    node _T_219_receivedAck = _T_227 @[I2C.scala 114:{60,60}]
    node _T_219_busy = _T_226 @[I2C.scala 114:{60,60}]
    node _T_219_arbLost = _T_225 @[I2C.scala 114:{60,60}]
    node _T_219_reserved = _T_224 @[I2C.scala 114:{60,60}]
    node _T_219_transferInProgress = _T_223 @[I2C.scala 114:{60,60}]
    node _T_219_irqFlag = _T_222 @[I2C.scala 114:{60,60}]
    node _T_493_ack = _T_498 @[I2C.scala 491:{38,38}]
    node _T_493_reserved = _T_497 @[I2C.scala 491:{38,38}]
    node _T_493_irqAck = _T_496 @[I2C.scala 491:{38,38}]
    node _T_1448_opcode = pad(UInt<1>("h0"), 3) @[Edges.scala 646:17 647:15]
    node _T_1448_data = pad(UInt<1>("h0"), 32) @[Edges.scala 646:17 652:15]
    auto_int_out_0 <= interrupts_0 @[LazyModule.scala 171:49]
    auto_in_a_ready <= _T_26_a_ready @[LazyModule.scala 171:31]
    auto_in_b_valid <= _T_26_b_valid @[LazyModule.scala 171:31]
    auto_in_b_bits_opcode <= _T_26_b_bits_opcode @[LazyModule.scala 171:31]
    auto_in_b_bits_param <= _T_26_b_bits_param @[LazyModule.scala 171:31]
    auto_in_b_bits_size <= _T_26_b_bits_size @[LazyModule.scala 171:31]
    auto_in_b_bits_source <= _T_26_b_bits_source @[LazyModule.scala 171:31]
    auto_in_b_bits_address <= _T_26_b_bits_address @[LazyModule.scala 171:31]
    auto_in_b_bits_mask <= _T_26_b_bits_mask @[LazyModule.scala 171:31]
    auto_in_b_bits_data <= _T_26_b_bits_data @[LazyModule.scala 171:31]
    auto_in_c_ready <= _T_26_c_ready @[LazyModule.scala 171:31]
    auto_in_d_valid <= _T_26_d_valid @[LazyModule.scala 171:31]
    auto_in_d_bits_opcode <= _T_26_d_bits_opcode @[LazyModule.scala 171:31]
    auto_in_d_bits_param <= _T_26_d_bits_param @[LazyModule.scala 171:31]
    auto_in_d_bits_size <= _T_26_d_bits_size @[LazyModule.scala 171:31]
    auto_in_d_bits_source <= _T_26_d_bits_source @[LazyModule.scala 171:31]
    auto_in_d_bits_sink <= _T_26_d_bits_sink @[LazyModule.scala 171:31]
    auto_in_d_bits_data <= _T_26_d_bits_data @[LazyModule.scala 171:31]
    auto_in_d_bits_error <= _T_26_d_bits_error @[LazyModule.scala 171:31]
    auto_in_e_ready <= _T_26_e_ready @[LazyModule.scala 171:31]
    io_port_scl_out <= UInt<1>("h0") @[I2C.scala 119:19]
    io_port_scl_oe <= _T_331 @[I2C.scala 178:18]
    io_port_sda_out <= UInt<1>("h0") @[I2C.scala 120:19]
    io_port_sda_oe <= _T_335 @[I2C.scala 181:18]
    TLMonitor.clock <= clock
    TLMonitor.reset <= reset
    TLMonitor.io_in_a_ready <= _T_54_a_ready @[Nodes.scala 26:19]
    TLMonitor.io_in_a_valid <= _T_54_a_valid @[Nodes.scala 26:19]
    TLMonitor.io_in_a_bits_opcode <= _T_54_a_bits_opcode @[Nodes.scala 26:19]
    TLMonitor.io_in_a_bits_param <= _T_54_a_bits_param @[Nodes.scala 26:19]
    TLMonitor.io_in_a_bits_size <= _T_54_a_bits_size @[Nodes.scala 26:19]
    TLMonitor.io_in_a_bits_source <= _T_54_a_bits_source @[Nodes.scala 26:19]
    TLMonitor.io_in_a_bits_address <= _T_54_a_bits_address @[Nodes.scala 26:19]
    TLMonitor.io_in_a_bits_mask <= _T_54_a_bits_mask @[Nodes.scala 26:19]
    TLMonitor.io_in_a_bits_data <= _T_54_a_bits_data @[Nodes.scala 26:19]
    TLMonitor.io_in_b_ready <= _T_54_b_ready @[Nodes.scala 26:19]
    TLMonitor.io_in_b_valid <= _T_54_b_valid @[Nodes.scala 26:19]
    TLMonitor.io_in_b_bits_opcode <= _T_54_b_bits_opcode @[Nodes.scala 26:19]
    TLMonitor.io_in_b_bits_param <= _T_54_b_bits_param @[Nodes.scala 26:19]
    TLMonitor.io_in_b_bits_size <= _T_54_b_bits_size @[Nodes.scala 26:19]
    TLMonitor.io_in_b_bits_source <= _T_54_b_bits_source @[Nodes.scala 26:19]
    TLMonitor.io_in_b_bits_address <= _T_54_b_bits_address @[Nodes.scala 26:19]
    TLMonitor.io_in_b_bits_mask <= _T_54_b_bits_mask @[Nodes.scala 26:19]
    TLMonitor.io_in_b_bits_data <= _T_54_b_bits_data @[Nodes.scala 26:19]
    TLMonitor.io_in_c_ready <= _T_54_c_ready @[Nodes.scala 26:19]
    TLMonitor.io_in_c_valid <= _T_54_c_valid @[Nodes.scala 26:19]
    TLMonitor.io_in_c_bits_opcode <= _T_54_c_bits_opcode @[Nodes.scala 26:19]
    TLMonitor.io_in_c_bits_param <= _T_54_c_bits_param @[Nodes.scala 26:19]
    TLMonitor.io_in_c_bits_size <= _T_54_c_bits_size @[Nodes.scala 26:19]
    TLMonitor.io_in_c_bits_source <= _T_54_c_bits_source @[Nodes.scala 26:19]
    TLMonitor.io_in_c_bits_address <= _T_54_c_bits_address @[Nodes.scala 26:19]
    TLMonitor.io_in_c_bits_data <= _T_54_c_bits_data @[Nodes.scala 26:19]
    TLMonitor.io_in_c_bits_error <= _T_54_c_bits_error @[Nodes.scala 26:19]
    TLMonitor.io_in_d_ready <= _T_54_d_ready @[Nodes.scala 26:19]
    TLMonitor.io_in_d_valid <= _T_54_d_valid @[Nodes.scala 26:19]
    TLMonitor.io_in_d_bits_opcode <= _T_54_d_bits_opcode @[Nodes.scala 26:19]
    TLMonitor.io_in_d_bits_param <= _T_54_d_bits_param @[Nodes.scala 26:19]
    TLMonitor.io_in_d_bits_size <= _T_54_d_bits_size @[Nodes.scala 26:19]
    TLMonitor.io_in_d_bits_source <= _T_54_d_bits_source @[Nodes.scala 26:19]
    TLMonitor.io_in_d_bits_sink <= _T_54_d_bits_sink @[Nodes.scala 26:19]
    TLMonitor.io_in_d_bits_data <= _T_54_d_bits_data @[Nodes.scala 26:19]
    TLMonitor.io_in_d_bits_error <= _T_54_d_bits_error @[Nodes.scala 26:19]
    TLMonitor.io_in_e_ready <= _T_54_e_ready @[Nodes.scala 26:19]
    TLMonitor.io_in_e_valid <= _T_54_e_valid @[Nodes.scala 26:19]
    TLMonitor.io_in_e_bits_sink <= _T_54_e_bits_sink @[Nodes.scala 26:19]
    prescaler_hi <= mux(reset, _T_182_hi, _GEN_205) @[I2C.scala 109:{25,25}]
    prescaler_lo <= mux(reset, _T_182_lo, _GEN_204) @[I2C.scala 109:{25,25}]
    control_coreEn <= mux(reset, _T_191_coreEn, _GEN_208) @[I2C.scala 110:{25,25}]
    control_intEn <= mux(reset, _T_191_intEn, _GEN_207) @[I2C.scala 110:{25,25}]
    control_reserved <= mux(reset, _T_191_reserved, UInt<1>("h0")) @[I2C.scala 110:{25,25} 548:20]
    transmitData <= mux(reset, UInt<8>("h0"), _GEN_209) @[I2C.scala 111:{25,25}]
    receivedData <= mux(reset, UInt<8>("h0"), bits(_GEN_117, 7, 0)) @[I2C.scala 112:{25,25}]
    cmd_start <= mux(reset, _T_205_start, _GEN_194) @[I2C.scala 113:{25,25}]
    cmd_stop <= mux(reset, _T_205_stop, _GEN_195) @[I2C.scala 113:{25,25}]
    cmd_read <= mux(reset, _T_205_read, _GEN_196) @[I2C.scala 113:{25,25}]
    cmd_write <= mux(reset, _T_205_write, _GEN_197) @[I2C.scala 113:{25,25}]
    cmd_ack <= mux(reset, _T_205_ack, _T_493_ack) @[I2C.scala 113:{25,25} 491:7]
    cmd_reserved <= mux(reset, _T_205_reserved, UInt<1>("h0")) @[I2C.scala 113:{25,25} 549:20]
    cmd_irqAck <= mux(reset, _T_205_irqAck, _T_493_irqAck) @[I2C.scala 113:{25,25} 491:7]
    status_receivedAck <= mux(reset, _T_219_receivedAck, receivedAck) @[I2C.scala 114:{25,25} 502:22]
    status_busy <= mux(reset, _T_219_busy, _GEN_199) @[I2C.scala 114:{25,25}]
    status_arbLost <= mux(reset, _T_219_arbLost, _GEN_201) @[I2C.scala 114:{25,25}]
    status_reserved <= mux(reset, _T_219_reserved, UInt<1>("h0")) @[I2C.scala 114:{25,25} 550:20]
    status_transferInProgress <= mux(reset, _T_219_transferInProgress, _T_520) @[I2C.scala 114:{25,25} 516:29]
    status_irqFlag <= mux(reset, _T_219_irqFlag, _T_525) @[I2C.scala 114:{25,25} 517:29]
    filterCnt <= mux(reset, UInt<14>("h0"), _GEN_1) @[I2C.scala 123:{22,22}]
    fSCL <= mux(reset, UInt<3>("h7"), bits(_GEN_2, 2, 0)) @[I2C.scala 132:{22,22}]
    fSDA <= mux(reset, UInt<3>("h7"), bits(_GEN_3, 2, 0)) @[I2C.scala 133:{22,22}]
    sSCL <= mux(reset, UInt<1>("h1"), _T_264) @[I2C.scala 139:{22,22,22}]
    sSDA <= mux(reset, UInt<1>("h1"), _T_274) @[I2C.scala 140:{22,22,22}]
    dSCL <= mux(reset, UInt<1>("h1"), sSCL) @[I2C.scala 142:{22,22,22}]
    dSDA <= mux(reset, UInt<1>("h1"), sSDA) @[I2C.scala 143:{22,22,22}]
    dSCLOen <= io_port_scl_oe @[I2C.scala 145:22]
    startCond <= mux(reset, UInt<1>("h0"), _T_285) @[I2C.scala 149:{22,22,22}]
    stopCond <= mux(reset, UInt<1>("h0"), _T_291) @[I2C.scala 150:{22,22,22}]
    slaveWait <= mux(reset, UInt<1>("h0"), _T_307) @[I2C.scala 158:{22,22} 159:13]
    clkEn <= mux(reset, UInt<1>("h1"), _GEN_7) @[I2C.scala 161:{22,22}]
    cnt <= mux(reset, UInt<16>("h0"), _GEN_6) @[I2C.scala 162:{22,22}]
    sclOen <= mux(reset, UInt<1>("h1"), _GEN_111) @[I2C.scala 177:{23,23}]
    sdaOen <= mux(reset, UInt<1>("h1"), _GEN_112) @[I2C.scala 180:{23,23}]
    sdaChk <= mux(reset, UInt<1>("h0"), _GEN_113) @[I2C.scala 183:{23,23}]
    transmitBit <= mux(reset, UInt<1>("h0"), _GEN_188) @[I2C.scala 185:{24,24}]
    receivedBit <= _GEN_8
    bitCmd <= mux(reset, UInt<4>("h0"), _GEN_187) @[I2C.scala 191:{24,24}]
    bitCmdStop <= mux(reset, UInt<1>("h0"), _GEN_9) @[I2C.scala 192:{24,24}]
    bitCmdAck <= mux(reset, UInt<1>("h0"), _GEN_110) @[I2C.scala 196:{24,24}]
    bitState <= mux(reset, UInt<5>("h0"), _GEN_109) @[I2C.scala 203:{24,24}]
    arbLost <= mux(reset, UInt<1>("h0"), _T_363) @[I2C.scala 205:{24,24,24}]
    load <= mux(reset, UInt<1>("h0"), _GEN_190) @[I2C.scala 345:{24,24}]
    shift <= mux(reset, UInt<1>("h0"), _GEN_189) @[I2C.scala 346:{24,24}]
    cmdAck <= mux(reset, UInt<1>("h0"), _GEN_191) @[I2C.scala 347:{24,24}]
    receivedAck <= mux(reset, UInt<1>("h0"), _GEN_193) @[I2C.scala 348:{24,24}]
    bitCnt <= mux(reset, UInt<3>("h0"), _GEN_115) @[I2C.scala 351:{24,24}]
    byteState <= mux(reset, UInt<3>("h0"), _GEN_192) @[I2C.scala 369:{24,24}]
    statusReadReady <= mux(reset, UInt<1>("h1"), _GEN_210) @[I2C.scala 520:{28,28}]

  module TLMonitor_72 :
    input clock : Clock
    input reset : UInt<1>
    input io_in_a_ready : UInt<1>
    input io_in_a_valid : UInt<1>
    input io_in_a_bits_opcode : UInt<3>
    input io_in_a_bits_param : UInt<3>
    input io_in_a_bits_size : UInt<2>
    input io_in_a_bits_source : UInt<7>
    input io_in_a_bits_address : UInt<29>
    input io_in_a_bits_mask : UInt<4>
    input io_in_a_bits_data : UInt<32>
    input io_in_b_ready : UInt<1>
    input io_in_b_valid : UInt<1>
    input io_in_b_bits_opcode : UInt<3>
    input io_in_b_bits_param : UInt<2>
    input io_in_b_bits_size : UInt<2>
    input io_in_b_bits_source : UInt<7>
    input io_in_b_bits_address : UInt<29>
    input io_in_b_bits_mask : UInt<4>
    input io_in_b_bits_data : UInt<32>
    input io_in_c_ready : UInt<1>
    input io_in_c_valid : UInt<1>
    input io_in_c_bits_opcode : UInt<3>
    input io_in_c_bits_param : UInt<3>
    input io_in_c_bits_size : UInt<2>
    input io_in_c_bits_source : UInt<7>
    input io_in_c_bits_address : UInt<29>
    input io_in_c_bits_data : UInt<32>
    input io_in_c_bits_error : UInt<1>
    input io_in_d_ready : UInt<1>
    input io_in_d_valid : UInt<1>
    input io_in_d_bits_opcode : UInt<3>
    input io_in_d_bits_param : UInt<2>
    input io_in_d_bits_size : UInt<2>
    input io_in_d_bits_source : UInt<7>
    input io_in_d_bits_sink : UInt<1>
    input io_in_d_bits_data : UInt<32>
    input io_in_d_bits_error : UInt<1>
    input io_in_e_ready : UInt<1>
    input io_in_e_valid : UInt<1>
    input io_in_e_bits_sink : UInt<1>

    inst DummyPlusArgReader of DummyPlusArgReader_75 @[PlusArg.scala 32:11]
    node _T_15 = bits(reset, 0, 0) @[compatibility.scala 247:56]
    node _T_17 = leq(io_in_a_bits_opcode, UInt<3>("h7")) @[Bundles.scala 40:24]
    node _T_18 = bits(reset, 0, 0) @[Monitor.scala 33:12]
    node _T_19 = or(_T_17, _T_18) @[Monitor.scala 33:12]
    node _T_21 = eq(_T_19, UInt<1>("h0")) @[Monitor.scala 33:12]
    node _T_23 = or(io_in_a_bits_source, UInt<7>("h0")) @[Parameters.scala 49:29]
    node _T_24 = bits(_T_23, 6, 0) @[Parameters.scala 49:64]
    node _T_25 = UInt<1>("h0") @[Parameters.scala 51:10]
    node _T_27 = eq(_T_25, UInt<1>("h0")) @[Parameters.scala 51:32]
    node _T_29 = leq(UInt<1>("h0"), _T_24) @[Parameters.scala 53:34]
    node _T_30 = and(_T_27, _T_29) @[Parameters.scala 51:69]
    node _T_32 = leq(_T_24, UInt<7>("h7f")) @[Parameters.scala 54:20]
    node _T_33 = and(_T_30, _T_32) @[Parameters.scala 53:50]
    node _T_41 = asUInt(asSInt(UInt<2>("h3"))) @[package.scala 104:70]
    node _T_42 = dshl(_T_41, io_in_a_bits_size) @[package.scala 104:77]
    node _T_43 = bits(_T_42, 1, 0) @[package.scala 104:82]
    node _T_44 = not(_T_43) @[package.scala 104:46]
    node _T_45 = and(io_in_a_bits_address, _T_44) @[Edges.scala 21:16]
    node _T_47 = eq(_T_45, UInt<1>("h0")) @[Edges.scala 21:24]
    node _T_48 = bits(io_in_a_bits_size, 0, 0) @[OneHot.scala 49:27]
    node _T_50 = dshl(UInt<1>("h1"), _T_48) @[OneHot.scala 50:12]
    node _T_51 = bits(_T_50, 1, 0) @[OneHot.scala 50:27]
    node _T_53 = or(_T_51, UInt<1>("h1")) @[Misc.scala 237:54]
    node _T_55 = geq(io_in_a_bits_size, UInt<2>("h2")) @[Misc.scala 241:21]
    node _T_57 = bits(_T_53, 1, 1) @[Misc.scala 244:26]
    node _T_58 = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 245:26]
    node _T_60 = eq(_T_58, UInt<1>("h0")) @[Misc.scala 246:20]
    node _T_61 = and(UInt<1>("h1"), _T_60) @[Misc.scala 249:27]
    node _T_62 = and(_T_57, _T_61) @[Misc.scala 250:38]
    node _T_63 = or(_T_55, _T_62) @[Misc.scala 250:29]
    node _T_64 = and(UInt<1>("h1"), _T_58) @[Misc.scala 249:27]
    node _T_65 = and(_T_57, _T_64) @[Misc.scala 250:38]
    node _T_66 = or(_T_55, _T_65) @[Misc.scala 250:29]
    node _T_67 = bits(_T_53, 0, 0) @[Misc.scala 244:26]
    node _T_68 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 245:26]
    node _T_70 = eq(_T_68, UInt<1>("h0")) @[Misc.scala 246:20]
    node _T_71 = and(_T_61, _T_70) @[Misc.scala 249:27]
    node _T_72 = and(_T_67, _T_71) @[Misc.scala 250:38]
    node _T_73 = or(_T_63, _T_72) @[Misc.scala 250:29]
    node _T_74 = and(_T_61, _T_68) @[Misc.scala 249:27]
    node _T_75 = and(_T_67, _T_74) @[Misc.scala 250:38]
    node _T_76 = or(_T_63, _T_75) @[Misc.scala 250:29]
    node _T_77 = and(_T_64, _T_70) @[Misc.scala 249:27]
    node _T_78 = and(_T_67, _T_77) @[Misc.scala 250:38]
    node _T_79 = or(_T_66, _T_78) @[Misc.scala 250:29]
    node _T_80 = and(_T_64, _T_68) @[Misc.scala 249:27]
    node _T_81 = and(_T_67, _T_80) @[Misc.scala 250:38]
    node _T_82 = or(_T_66, _T_81) @[Misc.scala 250:29]
    node _T_83 = cat(_T_76, _T_73) @[Cat.scala 30:58]
    node _T_84 = cat(_T_82, _T_79) @[Cat.scala 30:58]
    node _T_85 = cat(_T_84, _T_83) @[Cat.scala 30:58]
    node _T_87 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 40:25]
    node _T_90 = or(UInt<1>("h0"), UInt<1>("h0")) @[Parameters.scala 157:31]
    node _T_92 = xor(io_in_a_bits_address, UInt<29>("h10016000")) @[Parameters.scala 119:31]
    node _T_93 = cvt(_T_92) @[Parameters.scala 119:49]
    node _T_95 = and(_T_93, asSInt(UInt<13>("h1000"))) @[Parameters.scala 119:52]
    node _T_96 = asSInt(_T_95) @[Parameters.scala 119:52]
    node _T_98 = eq(_T_96, asSInt(UInt<1>("h0"))) @[Parameters.scala 119:67]
    node _T_99 = and(_T_90, _T_98) @[Parameters.scala 157:56]
    node _T_101 = or(UInt<1>("h0"), _T_99) @[Parameters.scala 159:30]
    node _T_102 = bits(reset, 0, 0) @[Monitor.scala 41:14]
    node _T_103 = or(_T_101, _T_102) @[Monitor.scala 41:14]
    node _T_105 = eq(_T_103, UInt<1>("h0")) @[Monitor.scala 41:14]
    node _T_107 = bits(reset, 0, 0) @[Monitor.scala 42:14]
    node _T_108 = or(UInt<1>("h0"), _T_107) @[Monitor.scala 42:14]
    node _T_110 = eq(_T_108, UInt<1>("h0")) @[Monitor.scala 42:14]
    node _T_111 = bits(reset, 0, 0) @[Monitor.scala 43:14]
    node _T_36_0 = _T_33 @[Parameters.scala 255:{27,27}]
    node _T_112 = or(_T_36_0, _T_111) @[Monitor.scala 43:14]
    node _T_114 = eq(_T_112, UInt<1>("h0")) @[Monitor.scala 43:14]
    node _T_116 = geq(io_in_a_bits_size, UInt<2>("h2")) @[Monitor.scala 44:27]
    node _T_117 = bits(reset, 0, 0) @[Monitor.scala 44:14]
    node _T_118 = or(_T_116, _T_117) @[Monitor.scala 44:14]
    node _T_120 = eq(_T_118, UInt<1>("h0")) @[Monitor.scala 44:14]
    node _T_121 = bits(reset, 0, 0) @[Monitor.scala 45:14]
    node _T_122 = or(_T_47, _T_121) @[Monitor.scala 45:14]
    node _T_124 = eq(_T_122, UInt<1>("h0")) @[Monitor.scala 45:14]
    node _T_126 = leq(io_in_a_bits_param, UInt<2>("h2")) @[Bundles.scala 71:27]
    node _T_127 = bits(reset, 0, 0) @[Monitor.scala 46:14]
    node _T_128 = or(_T_126, _T_127) @[Monitor.scala 46:14]
    node _T_130 = eq(_T_128, UInt<1>("h0")) @[Monitor.scala 46:14]
    node _T_131 = not(io_in_a_bits_mask) @[Monitor.scala 47:15]
    node _T_133 = eq(_T_131, UInt<1>("h0")) @[Monitor.scala 47:28]
    node _T_134 = bits(reset, 0, 0) @[Monitor.scala 47:14]
    node _T_135 = or(_T_133, _T_134) @[Monitor.scala 47:14]
    node _T_137 = eq(_T_135, UInt<1>("h0")) @[Monitor.scala 47:14]
    node _T_139 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 50:25]
    node _T_142 = or(UInt<1>("h0"), UInt<1>("h0")) @[Parameters.scala 157:31]
    node _T_144 = xor(io_in_a_bits_address, UInt<29>("h10016000")) @[Parameters.scala 119:31]
    node _T_145 = cvt(_T_144) @[Parameters.scala 119:49]
    node _T_147 = and(_T_145, asSInt(UInt<13>("h1000"))) @[Parameters.scala 119:52]
    node _T_148 = asSInt(_T_147) @[Parameters.scala 119:52]
    node _T_150 = eq(_T_148, asSInt(UInt<1>("h0"))) @[Parameters.scala 119:67]
    node _T_151 = and(_T_142, _T_150) @[Parameters.scala 157:56]
    node _T_153 = or(UInt<1>("h0"), _T_151) @[Parameters.scala 159:30]
    node _T_154 = bits(reset, 0, 0) @[Monitor.scala 51:14]
    node _T_155 = or(_T_153, _T_154) @[Monitor.scala 51:14]
    node _T_157 = eq(_T_155, UInt<1>("h0")) @[Monitor.scala 51:14]
    node _T_159 = bits(reset, 0, 0) @[Monitor.scala 52:14]
    node _T_160 = or(UInt<1>("h0"), _T_159) @[Monitor.scala 52:14]
    node _T_162 = eq(_T_160, UInt<1>("h0")) @[Monitor.scala 52:14]
    node _T_163 = bits(reset, 0, 0) @[Monitor.scala 53:14]
    node _T_164 = or(_T_36_0, _T_163) @[Monitor.scala 53:14]
    node _T_166 = eq(_T_164, UInt<1>("h0")) @[Monitor.scala 53:14]
    node _T_168 = geq(io_in_a_bits_size, UInt<2>("h2")) @[Monitor.scala 54:27]
    node _T_169 = bits(reset, 0, 0) @[Monitor.scala 54:14]
    node _T_170 = or(_T_168, _T_169) @[Monitor.scala 54:14]
    node _T_172 = eq(_T_170, UInt<1>("h0")) @[Monitor.scala 54:14]
    node _T_173 = bits(reset, 0, 0) @[Monitor.scala 55:14]
    node _T_174 = or(_T_47, _T_173) @[Monitor.scala 55:14]
    node _T_176 = eq(_T_174, UInt<1>("h0")) @[Monitor.scala 55:14]
    node _T_178 = leq(io_in_a_bits_param, UInt<2>("h2")) @[Bundles.scala 71:27]
    node _T_179 = bits(reset, 0, 0) @[Monitor.scala 56:14]
    node _T_180 = or(_T_178, _T_179) @[Monitor.scala 56:14]
    node _T_182 = eq(_T_180, UInt<1>("h0")) @[Monitor.scala 56:14]
    node _T_184 = neq(io_in_a_bits_param, UInt<2>("h0")) @[Monitor.scala 57:28]
    node _T_185 = bits(reset, 0, 0) @[Monitor.scala 57:14]
    node _T_186 = or(_T_184, _T_185) @[Monitor.scala 57:14]
    node _T_188 = eq(_T_186, UInt<1>("h0")) @[Monitor.scala 57:14]
    node _T_189 = not(io_in_a_bits_mask) @[Monitor.scala 58:15]
    node _T_191 = eq(_T_189, UInt<1>("h0")) @[Monitor.scala 58:28]
    node _T_192 = bits(reset, 0, 0) @[Monitor.scala 58:14]
    node _T_193 = or(_T_191, _T_192) @[Monitor.scala 58:14]
    node _T_195 = eq(_T_193, UInt<1>("h0")) @[Monitor.scala 58:14]
    node _T_197 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 61:25]
    node _T_200 = leq(UInt<1>("h0"), io_in_a_bits_size) @[Parameters.scala 88:32]
    node _T_202 = leq(io_in_a_bits_size, UInt<2>("h2")) @[Parameters.scala 88:42]
    node _T_203 = and(_T_200, _T_202) @[Parameters.scala 88:37]
    node _T_204 = or(UInt<1>("h0"), _T_203) @[Parameters.scala 157:31]
    node _T_206 = xor(io_in_a_bits_address, UInt<29>("h10016000")) @[Parameters.scala 119:31]
    node _T_207 = cvt(_T_206) @[Parameters.scala 119:49]
    node _T_209 = and(_T_207, asSInt(UInt<13>("h1000"))) @[Parameters.scala 119:52]
    node _T_210 = asSInt(_T_209) @[Parameters.scala 119:52]
    node _T_212 = eq(_T_210, asSInt(UInt<1>("h0"))) @[Parameters.scala 119:67]
    node _T_213 = and(_T_204, _T_212) @[Parameters.scala 157:56]
    node _T_215 = or(UInt<1>("h0"), _T_213) @[Parameters.scala 159:30]
    node _T_216 = bits(reset, 0, 0) @[Monitor.scala 62:14]
    node _T_217 = or(_T_215, _T_216) @[Monitor.scala 62:14]
    node _T_219 = eq(_T_217, UInt<1>("h0")) @[Monitor.scala 62:14]
    node _T_220 = bits(reset, 0, 0) @[Monitor.scala 63:14]
    node _T_221 = or(_T_36_0, _T_220) @[Monitor.scala 63:14]
    node _T_223 = eq(_T_221, UInt<1>("h0")) @[Monitor.scala 63:14]
    node _T_224 = bits(reset, 0, 0) @[Monitor.scala 64:14]
    node _T_225 = or(_T_47, _T_224) @[Monitor.scala 64:14]
    node _T_227 = eq(_T_225, UInt<1>("h0")) @[Monitor.scala 64:14]
    node _T_229 = eq(io_in_a_bits_param, UInt<1>("h0")) @[Monitor.scala 65:28]
    node _T_230 = bits(reset, 0, 0) @[Monitor.scala 65:14]
    node _T_231 = or(_T_229, _T_230) @[Monitor.scala 65:14]
    node _T_233 = eq(_T_231, UInt<1>("h0")) @[Monitor.scala 65:14]
    node _T_234 = eq(io_in_a_bits_mask, _T_85) @[Monitor.scala 66:27]
    node _T_235 = bits(reset, 0, 0) @[Monitor.scala 66:14]
    node _T_236 = or(_T_234, _T_235) @[Monitor.scala 66:14]
    node _T_238 = eq(_T_236, UInt<1>("h0")) @[Monitor.scala 66:14]
    node _T_240 = eq(io_in_a_bits_opcode, UInt<1>("h0")) @[Monitor.scala 69:25]
    node _T_243 = leq(UInt<1>("h0"), io_in_a_bits_size) @[Parameters.scala 88:32]
    node _T_245 = leq(io_in_a_bits_size, UInt<2>("h2")) @[Parameters.scala 88:42]
    node _T_246 = and(_T_243, _T_245) @[Parameters.scala 88:37]
    node _T_247 = or(UInt<1>("h0"), _T_246) @[Parameters.scala 157:31]
    node _T_249 = xor(io_in_a_bits_address, UInt<29>("h10016000")) @[Parameters.scala 119:31]
    node _T_250 = cvt(_T_249) @[Parameters.scala 119:49]
    node _T_252 = and(_T_250, asSInt(UInt<13>("h1000"))) @[Parameters.scala 119:52]
    node _T_253 = asSInt(_T_252) @[Parameters.scala 119:52]
    node _T_255 = eq(_T_253, asSInt(UInt<1>("h0"))) @[Parameters.scala 119:67]
    node _T_256 = and(_T_247, _T_255) @[Parameters.scala 157:56]
    node _T_258 = or(UInt<1>("h0"), _T_256) @[Parameters.scala 159:30]
    node _T_259 = bits(reset, 0, 0) @[Monitor.scala 70:14]
    node _T_260 = or(_T_258, _T_259) @[Monitor.scala 70:14]
    node _T_262 = eq(_T_260, UInt<1>("h0")) @[Monitor.scala 70:14]
    node _T_263 = bits(reset, 0, 0) @[Monitor.scala 71:14]
    node _T_264 = or(_T_36_0, _T_263) @[Monitor.scala 71:14]
    node _T_266 = eq(_T_264, UInt<1>("h0")) @[Monitor.scala 71:14]
    node _T_267 = bits(reset, 0, 0) @[Monitor.scala 72:14]
    node _T_268 = or(_T_47, _T_267) @[Monitor.scala 72:14]
    node _T_270 = eq(_T_268, UInt<1>("h0")) @[Monitor.scala 72:14]
    node _T_272 = eq(io_in_a_bits_param, UInt<1>("h0")) @[Monitor.scala 73:28]
    node _T_273 = bits(reset, 0, 0) @[Monitor.scala 73:14]
    node _T_274 = or(_T_272, _T_273) @[Monitor.scala 73:14]
    node _T_276 = eq(_T_274, UInt<1>("h0")) @[Monitor.scala 73:14]
    node _T_277 = eq(io_in_a_bits_mask, _T_85) @[Monitor.scala 74:27]
    node _T_278 = bits(reset, 0, 0) @[Monitor.scala 74:14]
    node _T_279 = or(_T_277, _T_278) @[Monitor.scala 74:14]
    node _T_281 = eq(_T_279, UInt<1>("h0")) @[Monitor.scala 74:14]
    node _T_283 = eq(io_in_a_bits_opcode, UInt<1>("h1")) @[Monitor.scala 77:25]
    node _T_286 = leq(UInt<1>("h0"), io_in_a_bits_size) @[Parameters.scala 88:32]
    node _T_288 = leq(io_in_a_bits_size, UInt<2>("h2")) @[Parameters.scala 88:42]
    node _T_289 = and(_T_286, _T_288) @[Parameters.scala 88:37]
    node _T_290 = or(UInt<1>("h0"), _T_289) @[Parameters.scala 157:31]
    node _T_292 = xor(io_in_a_bits_address, UInt<29>("h10016000")) @[Parameters.scala 119:31]
    node _T_293 = cvt(_T_292) @[Parameters.scala 119:49]
    node _T_295 = and(_T_293, asSInt(UInt<13>("h1000"))) @[Parameters.scala 119:52]
    node _T_296 = asSInt(_T_295) @[Parameters.scala 119:52]
    node _T_298 = eq(_T_296, asSInt(UInt<1>("h0"))) @[Parameters.scala 119:67]
    node _T_299 = and(_T_290, _T_298) @[Parameters.scala 157:56]
    node _T_301 = or(UInt<1>("h0"), _T_299) @[Parameters.scala 159:30]
    node _T_302 = bits(reset, 0, 0) @[Monitor.scala 78:14]
    node _T_303 = or(_T_301, _T_302) @[Monitor.scala 78:14]
    node _T_305 = eq(_T_303, UInt<1>("h0")) @[Monitor.scala 78:14]
    node _T_306 = bits(reset, 0, 0) @[Monitor.scala 79:14]
    node _T_307 = or(_T_36_0, _T_306) @[Monitor.scala 79:14]
    node _T_309 = eq(_T_307, UInt<1>("h0")) @[Monitor.scala 79:14]
    node _T_310 = bits(reset, 0, 0) @[Monitor.scala 80:14]
    node _T_311 = or(_T_47, _T_310) @[Monitor.scala 80:14]
    node _T_313 = eq(_T_311, UInt<1>("h0")) @[Monitor.scala 80:14]
    node _T_315 = eq(io_in_a_bits_param, UInt<1>("h0")) @[Monitor.scala 81:28]
    node _T_316 = bits(reset, 0, 0) @[Monitor.scala 81:14]
    node _T_317 = or(_T_315, _T_316) @[Monitor.scala 81:14]
    node _T_319 = eq(_T_317, UInt<1>("h0")) @[Monitor.scala 81:14]
    node _T_320 = not(_T_85) @[Monitor.scala 82:30]
    node _T_321 = and(io_in_a_bits_mask, _T_320) @[Monitor.scala 82:28]
    node _T_323 = eq(_T_321, UInt<1>("h0")) @[Monitor.scala 82:37]
    node _T_324 = bits(reset, 0, 0) @[Monitor.scala 82:14]
    node _T_325 = or(_T_323, _T_324) @[Monitor.scala 82:14]
    node _T_327 = eq(_T_325, UInt<1>("h0")) @[Monitor.scala 82:14]
    node _T_329 = eq(io_in_a_bits_opcode, UInt<2>("h2")) @[Monitor.scala 85:25]
    node _T_332 = or(UInt<1>("h0"), UInt<1>("h0")) @[Parameters.scala 157:31]
    node _T_334 = xor(io_in_a_bits_address, UInt<29>("h10016000")) @[Parameters.scala 119:31]
    node _T_335 = cvt(_T_334) @[Parameters.scala 119:49]
    node _T_337 = and(_T_335, asSInt(UInt<13>("h1000"))) @[Parameters.scala 119:52]
    node _T_338 = asSInt(_T_337) @[Parameters.scala 119:52]
    node _T_340 = eq(_T_338, asSInt(UInt<1>("h0"))) @[Parameters.scala 119:67]
    node _T_341 = and(_T_332, _T_340) @[Parameters.scala 157:56]
    node _T_343 = or(UInt<1>("h0"), _T_341) @[Parameters.scala 159:30]
    node _T_344 = bits(reset, 0, 0) @[Monitor.scala 86:14]
    node _T_345 = or(_T_343, _T_344) @[Monitor.scala 86:14]
    node _T_347 = eq(_T_345, UInt<1>("h0")) @[Monitor.scala 86:14]
    node _T_348 = bits(reset, 0, 0) @[Monitor.scala 87:14]
    node _T_349 = or(_T_36_0, _T_348) @[Monitor.scala 87:14]
    node _T_351 = eq(_T_349, UInt<1>("h0")) @[Monitor.scala 87:14]
    node _T_352 = bits(reset, 0, 0) @[Monitor.scala 88:14]
    node _T_353 = or(_T_47, _T_352) @[Monitor.scala 88:14]
    node _T_355 = eq(_T_353, UInt<1>("h0")) @[Monitor.scala 88:14]
    node _T_357 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 96:33]
    node _T_358 = bits(reset, 0, 0) @[Monitor.scala 89:14]
    node _T_359 = or(_T_357, _T_358) @[Monitor.scala 89:14]
    node _T_361 = eq(_T_359, UInt<1>("h0")) @[Monitor.scala 89:14]
    node _T_362 = eq(io_in_a_bits_mask, _T_85) @[Monitor.scala 90:27]
    node _T_363 = bits(reset, 0, 0) @[Monitor.scala 90:14]
    node _T_364 = or(_T_362, _T_363) @[Monitor.scala 90:14]
    node _T_366 = eq(_T_364, UInt<1>("h0")) @[Monitor.scala 90:14]
    node _T_368 = eq(io_in_a_bits_opcode, UInt<2>("h3")) @[Monitor.scala 93:25]
    node _T_371 = or(UInt<1>("h0"), UInt<1>("h0")) @[Parameters.scala 157:31]
    node _T_373 = xor(io_in_a_bits_address, UInt<29>("h10016000")) @[Parameters.scala 119:31]
    node _T_374 = cvt(_T_373) @[Parameters.scala 119:49]
    node _T_376 = and(_T_374, asSInt(UInt<13>("h1000"))) @[Parameters.scala 119:52]
    node _T_377 = asSInt(_T_376) @[Parameters.scala 119:52]
    node _T_379 = eq(_T_377, asSInt(UInt<1>("h0"))) @[Parameters.scala 119:67]
    node _T_380 = and(_T_371, _T_379) @[Parameters.scala 157:56]
    node _T_382 = or(UInt<1>("h0"), _T_380) @[Parameters.scala 159:30]
    node _T_383 = bits(reset, 0, 0) @[Monitor.scala 94:14]
    node _T_384 = or(_T_382, _T_383) @[Monitor.scala 94:14]
    node _T_386 = eq(_T_384, UInt<1>("h0")) @[Monitor.scala 94:14]
    node _T_387 = bits(reset, 0, 0) @[Monitor.scala 95:14]
    node _T_388 = or(_T_36_0, _T_387) @[Monitor.scala 95:14]
    node _T_390 = eq(_T_388, UInt<1>("h0")) @[Monitor.scala 95:14]
    node _T_391 = bits(reset, 0, 0) @[Monitor.scala 96:14]
    node _T_392 = or(_T_47, _T_391) @[Monitor.scala 96:14]
    node _T_394 = eq(_T_392, UInt<1>("h0")) @[Monitor.scala 96:14]
    node _T_396 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 103:30]
    node _T_397 = bits(reset, 0, 0) @[Monitor.scala 97:14]
    node _T_398 = or(_T_396, _T_397) @[Monitor.scala 97:14]
    node _T_400 = eq(_T_398, UInt<1>("h0")) @[Monitor.scala 97:14]
    node _T_401 = eq(io_in_a_bits_mask, _T_85) @[Monitor.scala 98:27]
    node _T_402 = bits(reset, 0, 0) @[Monitor.scala 98:14]
    node _T_403 = or(_T_401, _T_402) @[Monitor.scala 98:14]
    node _T_405 = eq(_T_403, UInt<1>("h0")) @[Monitor.scala 98:14]
    node _T_407 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 101:25]
    node _T_410 = or(UInt<1>("h0"), UInt<1>("h0")) @[Parameters.scala 157:31]
    node _T_412 = xor(io_in_a_bits_address, UInt<29>("h10016000")) @[Parameters.scala 119:31]
    node _T_413 = cvt(_T_412) @[Parameters.scala 119:49]
    node _T_415 = and(_T_413, asSInt(UInt<13>("h1000"))) @[Parameters.scala 119:52]
    node _T_416 = asSInt(_T_415) @[Parameters.scala 119:52]
    node _T_418 = eq(_T_416, asSInt(UInt<1>("h0"))) @[Parameters.scala 119:67]
    node _T_419 = and(_T_410, _T_418) @[Parameters.scala 157:56]
    node _T_421 = or(UInt<1>("h0"), _T_419) @[Parameters.scala 159:30]
    node _T_422 = bits(reset, 0, 0) @[Monitor.scala 102:14]
    node _T_423 = or(_T_421, _T_422) @[Monitor.scala 102:14]
    node _T_425 = eq(_T_423, UInt<1>("h0")) @[Monitor.scala 102:14]
    node _T_426 = bits(reset, 0, 0) @[Monitor.scala 103:14]
    node _T_427 = or(_T_36_0, _T_426) @[Monitor.scala 103:14]
    node _T_429 = eq(_T_427, UInt<1>("h0")) @[Monitor.scala 103:14]
    node _T_430 = bits(reset, 0, 0) @[Monitor.scala 104:14]
    node _T_431 = or(_T_47, _T_430) @[Monitor.scala 104:14]
    node _T_433 = eq(_T_431, UInt<1>("h0")) @[Monitor.scala 104:14]
    node _T_434 = eq(io_in_a_bits_mask, _T_85) @[Monitor.scala 105:27]
    node _T_435 = bits(reset, 0, 0) @[Monitor.scala 105:14]
    node _T_436 = or(_T_434, _T_435) @[Monitor.scala 105:14]
    node _T_438 = eq(_T_436, UInt<1>("h0")) @[Monitor.scala 105:14]
    node _T_440 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 43:24]
    node _T_441 = bits(reset, 0, 0) @[Monitor.scala 247:12]
    node _T_442 = or(_T_440, _T_441) @[Monitor.scala 247:12]
    node _T_444 = eq(_T_442, UInt<1>("h0")) @[Monitor.scala 247:12]
    node _T_446 = or(io_in_d_bits_source, UInt<7>("h0")) @[Parameters.scala 49:29]
    node _T_447 = bits(_T_446, 6, 0) @[Parameters.scala 49:64]
    node _T_448 = UInt<1>("h0") @[Parameters.scala 51:10]
    node _T_450 = eq(_T_448, UInt<1>("h0")) @[Parameters.scala 51:32]
    node _T_452 = leq(UInt<1>("h0"), _T_447) @[Parameters.scala 53:34]
    node _T_453 = and(_T_450, _T_452) @[Parameters.scala 51:69]
    node _T_455 = leq(_T_447, UInt<7>("h7f")) @[Parameters.scala 54:20]
    node _T_456 = and(_T_453, _T_455) @[Parameters.scala 53:50]
    node _T_465 = lt(io_in_d_bits_sink, UInt<1>("h0")) @[Monitor.scala 250:68]
    node _T_466 = or(UInt<1>("h1"), _T_465) @[Monitor.scala 250:53]
    node _T_468 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 252:25]
    node _T_469 = bits(reset, 0, 0) @[Monitor.scala 253:14]
    node _T_459_0 = _T_456 @[Parameters.scala 255:{27,27}]
    node _T_470 = or(_T_459_0, _T_469) @[Monitor.scala 253:14]
    node _T_472 = eq(_T_470, UInt<1>("h0")) @[Monitor.scala 253:14]
    node _T_473 = bits(reset, 0, 0) @[Monitor.scala 254:14]
    node _T_474 = or(_T_466, _T_473) @[Monitor.scala 254:14]
    node _T_476 = eq(_T_474, UInt<1>("h0")) @[Monitor.scala 254:14]
    node _T_478 = geq(io_in_d_bits_size, UInt<2>("h2")) @[Monitor.scala 255:27]
    node _T_479 = bits(reset, 0, 0) @[Monitor.scala 255:14]
    node _T_480 = or(_T_478, _T_479) @[Monitor.scala 255:14]
    node _T_482 = eq(_T_480, UInt<1>("h0")) @[Monitor.scala 255:14]
    node _T_484 = eq(io_in_d_bits_param, UInt<1>("h0")) @[Monitor.scala 256:28]
    node _T_485 = bits(reset, 0, 0) @[Monitor.scala 256:14]
    node _T_486 = or(_T_484, _T_485) @[Monitor.scala 256:14]
    node _T_488 = eq(_T_486, UInt<1>("h0")) @[Monitor.scala 256:14]
    node _T_490 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 259:25]
    node _T_491 = bits(reset, 0, 0) @[Monitor.scala 260:14]
    node _T_492 = or(_T_459_0, _T_491) @[Monitor.scala 260:14]
    node _T_494 = eq(_T_492, UInt<1>("h0")) @[Monitor.scala 260:14]
    node _T_495 = bits(reset, 0, 0) @[Monitor.scala 261:14]
    node _T_496 = or(_T_466, _T_495) @[Monitor.scala 261:14]
    node _T_498 = eq(_T_496, UInt<1>("h0")) @[Monitor.scala 261:14]
    node _T_500 = geq(io_in_d_bits_size, UInt<2>("h2")) @[Monitor.scala 262:27]
    node _T_501 = bits(reset, 0, 0) @[Monitor.scala 262:14]
    node _T_502 = or(_T_500, _T_501) @[Monitor.scala 262:14]
    node _T_504 = eq(_T_502, UInt<1>("h0")) @[Monitor.scala 262:14]
    node _T_506 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 65:26]
    node _T_507 = bits(reset, 0, 0) @[Monitor.scala 263:14]
    node _T_508 = or(_T_506, _T_507) @[Monitor.scala 263:14]
    node _T_510 = eq(_T_508, UInt<1>("h0")) @[Monitor.scala 263:14]
    node _T_512 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 266:25]
    node _T_513 = bits(reset, 0, 0) @[Monitor.scala 267:14]
    node _T_514 = or(_T_459_0, _T_513) @[Monitor.scala 267:14]
    node _T_516 = eq(_T_514, UInt<1>("h0")) @[Monitor.scala 267:14]
    node _T_517 = bits(reset, 0, 0) @[Monitor.scala 268:14]
    node _T_518 = or(_T_466, _T_517) @[Monitor.scala 268:14]
    node _T_520 = eq(_T_518, UInt<1>("h0")) @[Monitor.scala 268:14]
    node _T_522 = geq(io_in_d_bits_size, UInt<2>("h2")) @[Monitor.scala 269:27]
    node _T_523 = bits(reset, 0, 0) @[Monitor.scala 269:14]
    node _T_524 = or(_T_522, _T_523) @[Monitor.scala 269:14]
    node _T_526 = eq(_T_524, UInt<1>("h0")) @[Monitor.scala 269:14]
    node _T_528 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 65:26]
    node _T_529 = bits(reset, 0, 0) @[Monitor.scala 270:14]
    node _T_530 = or(_T_528, _T_529) @[Monitor.scala 270:14]
    node _T_532 = eq(_T_530, UInt<1>("h0")) @[Monitor.scala 270:14]
    node _T_534 = eq(io_in_d_bits_opcode, UInt<1>("h0")) @[Monitor.scala 273:25]
    node _T_535 = bits(reset, 0, 0) @[Monitor.scala 274:14]
    node _T_536 = or(_T_459_0, _T_535) @[Monitor.scala 274:14]
    node _T_538 = eq(_T_536, UInt<1>("h0")) @[Monitor.scala 274:14]
    node _T_539 = bits(reset, 0, 0) @[Monitor.scala 275:14]
    node _T_540 = or(_T_466, _T_539) @[Monitor.scala 275:14]
    node _T_542 = eq(_T_540, UInt<1>("h0")) @[Monitor.scala 275:14]
    node _T_544 = eq(io_in_d_bits_param, UInt<1>("h0")) @[Monitor.scala 277:28]
    node _T_545 = bits(reset, 0, 0) @[Monitor.scala 277:14]
    node _T_546 = or(_T_544, _T_545) @[Monitor.scala 277:14]
    node _T_548 = eq(_T_546, UInt<1>("h0")) @[Monitor.scala 277:14]
    node _T_550 = eq(io_in_d_bits_opcode, UInt<1>("h1")) @[Monitor.scala 280:25]
    node _T_551 = bits(reset, 0, 0) @[Monitor.scala 281:14]
    node _T_552 = or(_T_459_0, _T_551) @[Monitor.scala 281:14]
    node _T_554 = eq(_T_552, UInt<1>("h0")) @[Monitor.scala 281:14]
    node _T_555 = bits(reset, 0, 0) @[Monitor.scala 282:14]
    node _T_556 = or(_T_466, _T_555) @[Monitor.scala 282:14]
    node _T_558 = eq(_T_556, UInt<1>("h0")) @[Monitor.scala 282:14]
    node _T_560 = eq(io_in_d_bits_param, UInt<1>("h0")) @[Monitor.scala 284:28]
    node _T_561 = bits(reset, 0, 0) @[Monitor.scala 284:14]
    node _T_562 = or(_T_560, _T_561) @[Monitor.scala 284:14]
    node _T_564 = eq(_T_562, UInt<1>("h0")) @[Monitor.scala 284:14]
    node _T_566 = eq(io_in_d_bits_opcode, UInt<2>("h2")) @[Monitor.scala 287:25]
    node _T_567 = bits(reset, 0, 0) @[Monitor.scala 288:14]
    node _T_568 = or(_T_459_0, _T_567) @[Monitor.scala 288:14]
    node _T_570 = eq(_T_568, UInt<1>("h0")) @[Monitor.scala 288:14]
    node _T_571 = bits(reset, 0, 0) @[Monitor.scala 289:14]
    node _T_572 = or(_T_466, _T_571) @[Monitor.scala 289:14]
    node _T_574 = eq(_T_572, UInt<1>("h0")) @[Monitor.scala 289:14]
    node _T_576 = eq(io_in_d_bits_param, UInt<1>("h0")) @[Monitor.scala 291:28]
    node _T_577 = bits(reset, 0, 0) @[Monitor.scala 291:14]
    node _T_578 = or(_T_576, _T_577) @[Monitor.scala 291:14]
    node _T_580 = eq(_T_578, UInt<1>("h0")) @[Monitor.scala 291:14]
    node _T_582 = eq(io_in_b_valid, UInt<1>("h0")) @[Monitor.scala 308:15]
    node _T_583 = bits(reset, 0, 0) @[Monitor.scala 308:14]
    node _T_584 = or(_T_582, _T_583) @[Monitor.scala 308:14]
    node _T_586 = eq(_T_584, UInt<1>("h0")) @[Monitor.scala 308:14]
    node _T_588 = eq(io_in_c_valid, UInt<1>("h0")) @[Monitor.scala 309:15]
    node _T_589 = bits(reset, 0, 0) @[Monitor.scala 309:14]
    node _T_590 = or(_T_588, _T_589) @[Monitor.scala 309:14]
    node _T_592 = eq(_T_590, UInt<1>("h0")) @[Monitor.scala 309:14]
    node _T_594 = eq(io_in_e_valid, UInt<1>("h0")) @[Monitor.scala 310:15]
    node _T_595 = bits(reset, 0, 0) @[Monitor.scala 310:14]
    node _T_596 = or(_T_594, _T_595) @[Monitor.scala 310:14]
    node _T_598 = eq(_T_596, UInt<1>("h0")) @[Monitor.scala 310:14]
    node _T_599 = and(io_in_a_ready, io_in_a_valid) @[Bundles.scala 207:36]
    node _T_601 = asUInt(asSInt(UInt<2>("h3"))) @[package.scala 104:70]
    node _T_602 = dshl(_T_601, io_in_a_bits_size) @[package.scala 104:77]
    node _T_603 = bits(_T_602, 1, 0) @[package.scala 104:82]
    node _T_604 = not(_T_603) @[package.scala 104:46]
    node _T_605 = UInt<1>("h0") @[Edges.scala 211:59]
    node _T_606 = bits(io_in_a_bits_opcode, 2, 2) @[Edges.scala 92:37]
    node _T_608 = eq(_T_606, UInt<1>("h0")) @[Edges.scala 92:28]
    node _T_610 = mux(_T_608, _T_605, UInt<1>("h0")) @[Edges.scala 212:14]
    reg _T_613 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), _T_613) @[Edges.scala 220:27]
    node _T_615 = sub(_T_613, UInt<1>("h1")) @[Edges.scala 221:28]
    node _T_616 = asUInt(_T_615) @[Edges.scala 221:28]
    node _T_617 = tail(_T_616, 1) @[Edges.scala 221:28]
    node _T_619 = eq(_T_613, UInt<1>("h0")) @[Edges.scala 222:25]
    node _T_621 = eq(_T_613, UInt<1>("h1")) @[Edges.scala 223:25]
    node _T_623 = eq(_T_610, UInt<1>("h0")) @[Edges.scala 223:47]
    node _T_624 = or(_T_621, _T_623) @[Edges.scala 223:37]
    node _T_625 = and(_T_624, _T_599) @[Edges.scala 224:22]
    node _T_626 = not(_T_617) @[Edges.scala 225:27]
    node _T_627 = and(_T_610, _T_626) @[Edges.scala 225:25]
    node _T_628 = mux(_T_619, _T_610, _T_617) @[Edges.scala 227:21]
    node _GEN_0 = mux(_T_599, _T_628, _T_613) @[Edges.scala 226:17 227:15 220:27]
    reg _T_630 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), _T_630) @[Monitor.scala 316:22]
    reg _T_632 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), _T_632) @[Monitor.scala 317:22]
    reg _T_634 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), _T_634) @[Monitor.scala 318:22]
    reg _T_636 : UInt<7>, clock with :
      reset => (UInt<1>("h0"), _T_636) @[Monitor.scala 319:22]
    reg _T_638 : UInt<29>, clock with :
      reset => (UInt<1>("h0"), _T_638) @[Monitor.scala 320:22]
    node _T_640 = eq(_T_619, UInt<1>("h0")) @[Monitor.scala 321:22]
    node _T_641 = and(io_in_a_valid, _T_640) @[Monitor.scala 321:19]
    node _T_642 = eq(io_in_a_bits_opcode, _T_630) @[Monitor.scala 322:29]
    node _T_643 = bits(reset, 0, 0) @[Monitor.scala 322:14]
    node _T_644 = or(_T_642, _T_643) @[Monitor.scala 322:14]
    node _T_646 = eq(_T_644, UInt<1>("h0")) @[Monitor.scala 322:14]
    node _T_647 = eq(io_in_a_bits_param, _T_632) @[Monitor.scala 323:29]
    node _T_648 = bits(reset, 0, 0) @[Monitor.scala 323:14]
    node _T_649 = or(_T_647, _T_648) @[Monitor.scala 323:14]
    node _T_651 = eq(_T_649, UInt<1>("h0")) @[Monitor.scala 323:14]
    node _T_652 = eq(io_in_a_bits_size, _T_634) @[Monitor.scala 324:29]
    node _T_653 = bits(reset, 0, 0) @[Monitor.scala 324:14]
    node _T_654 = or(_T_652, _T_653) @[Monitor.scala 324:14]
    node _T_656 = eq(_T_654, UInt<1>("h0")) @[Monitor.scala 324:14]
    node _T_657 = eq(io_in_a_bits_source, _T_636) @[Monitor.scala 325:29]
    node _T_658 = bits(reset, 0, 0) @[Monitor.scala 325:14]
    node _T_659 = or(_T_657, _T_658) @[Monitor.scala 325:14]
    node _T_661 = eq(_T_659, UInt<1>("h0")) @[Monitor.scala 325:14]
    node _T_662 = eq(io_in_a_bits_address, _T_638) @[Monitor.scala 326:29]
    node _T_663 = bits(reset, 0, 0) @[Monitor.scala 326:14]
    node _T_664 = or(_T_662, _T_663) @[Monitor.scala 326:14]
    node _T_666 = eq(_T_664, UInt<1>("h0")) @[Monitor.scala 326:14]
    node _T_667 = and(io_in_a_ready, io_in_a_valid) @[Bundles.scala 207:36]
    node _T_668 = and(_T_667, _T_619) @[Monitor.scala 328:20]
    node _GEN_1 = mux(_T_668, io_in_a_bits_opcode, _T_630) @[Monitor.scala 328:32 329:15 316:22]
    node _GEN_2 = mux(_T_668, io_in_a_bits_param, _T_632) @[Monitor.scala 328:32 330:15 317:22]
    node _GEN_3 = mux(_T_668, io_in_a_bits_size, _T_634) @[Monitor.scala 328:32 331:15 318:22]
    node _GEN_4 = mux(_T_668, io_in_a_bits_source, _T_636) @[Monitor.scala 328:32 332:15 319:22]
    node _GEN_5 = mux(_T_668, io_in_a_bits_address, _T_638) @[Monitor.scala 328:32 333:15 320:22]
    node _T_669 = and(io_in_d_ready, io_in_d_valid) @[Bundles.scala 207:36]
    node _T_671 = asUInt(asSInt(UInt<2>("h3"))) @[package.scala 104:70]
    node _T_672 = dshl(_T_671, io_in_d_bits_size) @[package.scala 104:77]
    node _T_673 = bits(_T_672, 1, 0) @[package.scala 104:82]
    node _T_674 = not(_T_673) @[package.scala 104:46]
    node _T_675 = UInt<1>("h0") @[Edges.scala 211:59]
    node _T_676 = bits(io_in_d_bits_opcode, 0, 0) @[Edges.scala 106:36]
    node _T_678 = mux(_T_676, _T_675, UInt<1>("h0")) @[Edges.scala 212:14]
    reg _T_681 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), _T_681) @[Edges.scala 220:27]
    node _T_683 = sub(_T_681, UInt<1>("h1")) @[Edges.scala 221:28]
    node _T_684 = asUInt(_T_683) @[Edges.scala 221:28]
    node _T_685 = tail(_T_684, 1) @[Edges.scala 221:28]
    node _T_687 = eq(_T_681, UInt<1>("h0")) @[Edges.scala 222:25]
    node _T_689 = eq(_T_681, UInt<1>("h1")) @[Edges.scala 223:25]
    node _T_691 = eq(_T_678, UInt<1>("h0")) @[Edges.scala 223:47]
    node _T_692 = or(_T_689, _T_691) @[Edges.scala 223:37]
    node _T_693 = and(_T_692, _T_669) @[Edges.scala 224:22]
    node _T_694 = not(_T_685) @[Edges.scala 225:27]
    node _T_695 = and(_T_678, _T_694) @[Edges.scala 225:25]
    node _T_696 = mux(_T_687, _T_678, _T_685) @[Edges.scala 227:21]
    node _GEN_6 = mux(_T_669, _T_696, _T_681) @[Edges.scala 226:17 227:15 220:27]
    reg _T_698 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), _T_698) @[Monitor.scala 387:22]
    reg _T_700 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), _T_700) @[Monitor.scala 388:22]
    reg _T_702 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), _T_702) @[Monitor.scala 389:22]
    reg _T_704 : UInt<7>, clock with :
      reset => (UInt<1>("h0"), _T_704) @[Monitor.scala 390:22]
    reg _T_706 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), _T_706) @[Monitor.scala 391:22]
    node _T_707 = and(io_in_d_ready, io_in_d_valid) @[Bundles.scala 207:36]
    reg _T_709 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), _T_709) @[Reg.scala 11:16]
    node _GEN_7 = mux(_T_707, io_in_d_bits_error, _T_709) @[Reg.scala 11:16 12:{19,23}]
    node _T_711 = eq(_T_687, UInt<1>("h0")) @[Monitor.scala 393:22]
    node _T_712 = and(io_in_d_valid, _T_711) @[Monitor.scala 393:19]
    node _T_713 = eq(io_in_d_bits_opcode, _T_698) @[Monitor.scala 394:29]
    node _T_714 = bits(reset, 0, 0) @[Monitor.scala 394:14]
    node _T_715 = or(_T_713, _T_714) @[Monitor.scala 394:14]
    node _T_717 = eq(_T_715, UInt<1>("h0")) @[Monitor.scala 394:14]
    node _T_718 = eq(io_in_d_bits_param, _T_700) @[Monitor.scala 395:29]
    node _T_719 = bits(reset, 0, 0) @[Monitor.scala 395:14]
    node _T_720 = or(_T_718, _T_719) @[Monitor.scala 395:14]
    node _T_722 = eq(_T_720, UInt<1>("h0")) @[Monitor.scala 395:14]
    node _T_723 = eq(io_in_d_bits_size, _T_702) @[Monitor.scala 396:29]
    node _T_724 = bits(reset, 0, 0) @[Monitor.scala 396:14]
    node _T_725 = or(_T_723, _T_724) @[Monitor.scala 396:14]
    node _T_727 = eq(_T_725, UInt<1>("h0")) @[Monitor.scala 396:14]
    node _T_728 = eq(io_in_d_bits_source, _T_704) @[Monitor.scala 397:29]
    node _T_729 = bits(reset, 0, 0) @[Monitor.scala 397:14]
    node _T_730 = or(_T_728, _T_729) @[Monitor.scala 397:14]
    node _T_732 = eq(_T_730, UInt<1>("h0")) @[Monitor.scala 397:14]
    node _T_733 = eq(io_in_d_bits_sink, _T_706) @[Monitor.scala 398:29]
    node _T_734 = bits(reset, 0, 0) @[Monitor.scala 398:14]
    node _T_735 = or(_T_733, _T_734) @[Monitor.scala 398:14]
    node _T_737 = eq(_T_735, UInt<1>("h0")) @[Monitor.scala 398:14]
    node _T_739 = eq(_T_709, UInt<1>("h0")) @[Monitor.scala 399:31]
    node _T_740 = or(io_in_d_bits_error, _T_739) @[Monitor.scala 399:28]
    node _T_741 = bits(reset, 0, 0) @[Monitor.scala 399:14]
    node _T_742 = or(_T_740, _T_741) @[Monitor.scala 399:14]
    node _T_744 = eq(_T_742, UInt<1>("h0")) @[Monitor.scala 399:14]
    node _T_745 = and(io_in_d_ready, io_in_d_valid) @[Bundles.scala 207:36]
    node _T_746 = and(_T_745, _T_687) @[Monitor.scala 401:20]
    node _GEN_8 = mux(_T_746, io_in_d_bits_opcode, _T_698) @[Monitor.scala 401:32 402:15 387:22]
    node _GEN_9 = mux(_T_746, io_in_d_bits_param, _T_700) @[Monitor.scala 401:32 403:15 388:22]
    node _GEN_10 = mux(_T_746, io_in_d_bits_size, _T_702) @[Monitor.scala 401:32 404:15 389:22]
    node _GEN_11 = mux(_T_746, io_in_d_bits_source, _T_704) @[Monitor.scala 401:32 405:15 390:22]
    node _GEN_12 = mux(_T_746, io_in_d_bits_sink, _T_706) @[Monitor.scala 401:32 406:15 391:22]
    reg _T_749 : UInt<128>, clock with :
      reset => (UInt<1>("h0"), _T_749) @[Monitor.scala 420:27]
    node _T_750 = and(io_in_a_ready, io_in_a_valid) @[Bundles.scala 207:36]
    node _T_752 = asUInt(asSInt(UInt<2>("h3"))) @[package.scala 104:70]
    node _T_753 = dshl(_T_752, io_in_a_bits_size) @[package.scala 104:77]
    node _T_754 = bits(_T_753, 1, 0) @[package.scala 104:82]
    node _T_755 = not(_T_754) @[package.scala 104:46]
    node _T_756 = UInt<1>("h0") @[Edges.scala 211:59]
    node _T_757 = bits(io_in_a_bits_opcode, 2, 2) @[Edges.scala 92:37]
    node _T_759 = eq(_T_757, UInt<1>("h0")) @[Edges.scala 92:28]
    node _T_761 = mux(_T_759, _T_756, UInt<1>("h0")) @[Edges.scala 212:14]
    reg _T_764 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), _T_764) @[Edges.scala 220:27]
    node _T_766 = sub(_T_764, UInt<1>("h1")) @[Edges.scala 221:28]
    node _T_767 = asUInt(_T_766) @[Edges.scala 221:28]
    node _T_768 = tail(_T_767, 1) @[Edges.scala 221:28]
    node _T_770 = eq(_T_764, UInt<1>("h0")) @[Edges.scala 222:25]
    node _T_772 = eq(_T_764, UInt<1>("h1")) @[Edges.scala 223:25]
    node _T_774 = eq(_T_761, UInt<1>("h0")) @[Edges.scala 223:47]
    node _T_775 = or(_T_772, _T_774) @[Edges.scala 223:37]
    node _T_776 = and(_T_775, _T_750) @[Edges.scala 224:22]
    node _T_777 = not(_T_768) @[Edges.scala 225:27]
    node _T_778 = and(_T_761, _T_777) @[Edges.scala 225:25]
    node _T_779 = mux(_T_770, _T_761, _T_768) @[Edges.scala 227:21]
    node _GEN_13 = mux(_T_750, _T_779, _T_764) @[Edges.scala 226:17 227:15 220:27]
    node _T_780 = and(io_in_d_ready, io_in_d_valid) @[Bundles.scala 207:36]
    node _T_782 = asUInt(asSInt(UInt<2>("h3"))) @[package.scala 104:70]
    node _T_783 = dshl(_T_782, io_in_d_bits_size) @[package.scala 104:77]
    node _T_784 = bits(_T_783, 1, 0) @[package.scala 104:82]
    node _T_785 = not(_T_784) @[package.scala 104:46]
    node _T_786 = UInt<1>("h0") @[Edges.scala 211:59]
    node _T_787 = bits(io_in_d_bits_opcode, 0, 0) @[Edges.scala 106:36]
    node _T_789 = mux(_T_787, _T_786, UInt<1>("h0")) @[Edges.scala 212:14]
    reg _T_792 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), _T_792) @[Edges.scala 220:27]
    node _T_794 = sub(_T_792, UInt<1>("h1")) @[Edges.scala 221:28]
    node _T_795 = asUInt(_T_794) @[Edges.scala 221:28]
    node _T_796 = tail(_T_795, 1) @[Edges.scala 221:28]
    node _T_798 = eq(_T_792, UInt<1>("h0")) @[Edges.scala 222:25]
    node _T_800 = eq(_T_792, UInt<1>("h1")) @[Edges.scala 223:25]
    node _T_802 = eq(_T_789, UInt<1>("h0")) @[Edges.scala 223:47]
    node _T_803 = or(_T_800, _T_802) @[Edges.scala 223:37]
    node _T_804 = and(_T_803, _T_780) @[Edges.scala 224:22]
    node _T_805 = not(_T_796) @[Edges.scala 225:27]
    node _T_806 = and(_T_789, _T_805) @[Edges.scala 225:25]
    node _T_807 = mux(_T_798, _T_789, _T_796) @[Edges.scala 227:21]
    node _GEN_14 = mux(_T_780, _T_807, _T_792) @[Edges.scala 226:17 227:15 220:27]
    node _T_811 = and(io_in_a_ready, io_in_a_valid) @[Bundles.scala 207:36]
    node _T_812 = and(_T_811, _T_770) @[Monitor.scala 426:27]
    node _T_814 = and(_T_812, UInt<1>("h1")) @[Monitor.scala 426:38]
    node _T_816 = dshl(UInt<1>("h1"), io_in_a_bits_source) @[OneHot.scala 45:35]
    node _T_817 = dshr(_T_749, io_in_a_bits_source) @[Monitor.scala 428:23]
    node _T_818 = bits(_T_817, 0, 0) @[Monitor.scala 428:23]
    node _T_820 = eq(_T_818, UInt<1>("h0")) @[Monitor.scala 428:14]
    node _T_821 = bits(reset, 0, 0) @[Monitor.scala 428:13]
    node _T_822 = or(_T_820, _T_821) @[Monitor.scala 428:13]
    node _T_824 = eq(_T_822, UInt<1>("h0")) @[Monitor.scala 428:13]
    node _GEN_15 = mux(_T_814, _T_816, UInt<128>("h0")) @[Monitor.scala 426:72 427:13]
    node _T_829 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 432:46]
    node _T_830 = and(io_in_d_ready, io_in_d_valid) @[Bundles.scala 207:36]
    node _T_831 = and(_T_830, _T_798) @[Monitor.scala 433:27]
    node _T_833 = and(_T_831, UInt<1>("h1")) @[Monitor.scala 433:38]
    node _T_835 = eq(_T_829, UInt<1>("h0")) @[Monitor.scala 433:75]
    node _T_836 = and(_T_833, _T_835) @[Monitor.scala 433:72]
    node _T_838 = dshl(UInt<1>("h1"), io_in_d_bits_source) @[OneHot.scala 45:35]
    node _T_810 = _GEN_15
    node _T_839 = or(_T_810, _T_749) @[Monitor.scala 435:21]
    node _T_840 = dshr(_T_839, io_in_d_bits_source) @[Monitor.scala 435:32]
    node _T_841 = bits(_T_840, 0, 0) @[Monitor.scala 435:32]
    node _T_842 = bits(reset, 0, 0) @[Monitor.scala 435:13]
    node _T_843 = or(_T_841, _T_842) @[Monitor.scala 435:13]
    node _T_845 = eq(_T_843, UInt<1>("h0")) @[Monitor.scala 435:13]
    node _GEN_16 = mux(_T_836, _T_838, UInt<128>("h0")) @[Monitor.scala 433:91 434:13]
    node _T_846 = or(_T_749, _T_810) @[Monitor.scala 442:27]
    node _T_827 = _GEN_16
    node _T_847 = not(_T_827) @[Monitor.scala 442:38]
    node _T_848 = and(_T_846, _T_847) @[Monitor.scala 442:36]
    reg _T_851 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), _T_851) @[Monitor.scala 444:27]
    node _T_853 = neq(_T_749, UInt<1>("h0")) @[Monitor.scala 447:23]
    node _T_855 = eq(_T_853, UInt<1>("h0")) @[Monitor.scala 447:13]
    node _T_857 = eq(DummyPlusArgReader.io_out, UInt<1>("h0")) @[Monitor.scala 447:36]
    node _T_858 = or(_T_855, _T_857) @[Monitor.scala 447:27]
    node _T_859 = lt(_T_851, DummyPlusArgReader.io_out) @[Monitor.scala 447:60]
    node _T_860 = or(_T_858, _T_859) @[Monitor.scala 447:48]
    node _T_861 = bits(reset, 0, 0) @[Monitor.scala 447:12]
    node _T_862 = or(_T_860, _T_861) @[Monitor.scala 447:12]
    node _T_864 = eq(_T_862, UInt<1>("h0")) @[Monitor.scala 447:12]
    node _T_866 = add(_T_851, UInt<1>("h1")) @[Monitor.scala 449:26]
    node _T_867 = tail(_T_866, 1) @[Monitor.scala 449:26]
    node _T_868 = and(io_in_a_ready, io_in_a_valid) @[Bundles.scala 207:36]
    node _T_869 = and(io_in_d_ready, io_in_d_valid) @[Bundles.scala 207:36]
    node _T_870 = or(_T_868, _T_869) @[Monitor.scala 450:27]
    node _GEN_17 = mux(_T_870, UInt<1>("h0"), _T_867) @[Monitor.scala 449:14 450:{47,58}]
    _T_613 <= mux(reset, UInt<1>("h0"), _GEN_0) @[Edges.scala 220:{27,27}]
    _T_630 <= _GEN_1
    _T_632 <= _GEN_2
    _T_634 <= _GEN_3
    _T_636 <= _GEN_4
    _T_638 <= _GEN_5
    _T_681 <= mux(reset, UInt<1>("h0"), _GEN_6) @[Edges.scala 220:{27,27}]
    _T_698 <= _GEN_8
    _T_700 <= _GEN_9
    _T_702 <= _GEN_10
    _T_704 <= _GEN_11
    _T_706 <= _GEN_12
    _T_709 <= _GEN_7
    _T_749 <= mux(reset, UInt<128>("h0"), _T_848) @[Monitor.scala 420:{27,27} 442:14]
    _T_764 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Edges.scala 220:{27,27}]
    _T_792 <= mux(reset, UInt<1>("h0"), _GEN_14) @[Edges.scala 220:{27,27}]
    _T_851 <= mux(reset, UInt<32>("h0"), _GEN_17) @[Monitor.scala 444:{27,27}]
    DummyPlusArgReader.clock <= clock
    DummyPlusArgReader.reset <= reset
    printf(clock, and(and(and(UInt<1>("h1"), io_in_a_valid), _T_21), UInt<1>("h1")), "Assertion failed: 'A' channel has invalid opcode (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:33 assert (TLMessages.isA(bundle.opcode), \"'A' channel has invalid opcode\" + extra)\n") @[Monitor.scala 33:12]
    stop(clock, and(and(and(UInt<1>("h1"), io_in_a_valid), _T_21), UInt<1>("h1")), 1) @[Monitor.scala 33:12]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_105), UInt<1>("h1")), "Assertion failed: 'A' channel carries AcquireBlock type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:41 assert (edge.manager.supportsAcquireBSafe(edge.address(bundle), bundle.size), \"'A' channel carries AcquireBlock type unsupported by manager\" + extra)\n") @[Monitor.scala 41:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_105), UInt<1>("h1")), 1) @[Monitor.scala 41:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_110), UInt<1>("h1")), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:42 assert (edge.client.supportsProbe(edge.source(bundle), bundle.size), \"'A' channel carries AcquireBlock from a client which does not support Probe\" + extra)\n") @[Monitor.scala 42:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_110), UInt<1>("h1")), 1) @[Monitor.scala 42:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_114), UInt<1>("h1")), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:43 assert (source_ok, \"'A' channel AcquireBlock carries invalid source ID\" + extra)\n") @[Monitor.scala 43:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_114), UInt<1>("h1")), 1) @[Monitor.scala 43:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_120), UInt<1>("h1")), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:44 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel AcquireBlock smaller than a beat\" + extra)\n") @[Monitor.scala 44:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_120), UInt<1>("h1")), 1) @[Monitor.scala 44:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_124), UInt<1>("h1")), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:45 assert (is_aligned, \"'A' channel AcquireBlock address not aligned to size\" + extra)\n") @[Monitor.scala 45:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_124), UInt<1>("h1")), 1) @[Monitor.scala 45:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_130), UInt<1>("h1")), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:46 assert (TLPermissions.isGrow(bundle.param), \"'A' channel AcquireBlock carries invalid grow param\" + extra)\n") @[Monitor.scala 46:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_130), UInt<1>("h1")), 1) @[Monitor.scala 46:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_137), UInt<1>("h1")), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:47 assert (~bundle.mask === UInt(0), \"'A' channel AcquireBlock contains invalid mask\" + extra)\n") @[Monitor.scala 47:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_87), _T_137), UInt<1>("h1")), 1) @[Monitor.scala 47:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_157), UInt<1>("h1")), "Assertion failed: 'A' channel carries AcquirePerm type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:51 assert (edge.manager.supportsAcquireBSafe(edge.address(bundle), bundle.size), \"'A' channel carries AcquirePerm type unsupported by manager\" + extra)\n") @[Monitor.scala 51:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_157), UInt<1>("h1")), 1) @[Monitor.scala 51:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_162), UInt<1>("h1")), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:52 assert (edge.client.supportsProbe(edge.source(bundle), bundle.size), \"'A' channel carries AcquirePerm from a client which does not support Probe\" + extra)\n") @[Monitor.scala 52:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_162), UInt<1>("h1")), 1) @[Monitor.scala 52:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_166), UInt<1>("h1")), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:53 assert (source_ok, \"'A' channel AcquirePerm carries invalid source ID\" + extra)\n") @[Monitor.scala 53:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_166), UInt<1>("h1")), 1) @[Monitor.scala 53:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_172), UInt<1>("h1")), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:54 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel AcquirePerm smaller than a beat\" + extra)\n") @[Monitor.scala 54:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_172), UInt<1>("h1")), 1) @[Monitor.scala 54:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_176), UInt<1>("h1")), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:55 assert (is_aligned, \"'A' channel AcquirePerm address not aligned to size\" + extra)\n") @[Monitor.scala 55:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_176), UInt<1>("h1")), 1) @[Monitor.scala 55:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_182), UInt<1>("h1")), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:56 assert (TLPermissions.isGrow(bundle.param), \"'A' channel AcquirePerm carries invalid grow param\" + extra)\n") @[Monitor.scala 56:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_182), UInt<1>("h1")), 1) @[Monitor.scala 56:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_188), UInt<1>("h1")), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:57 assert (bundle.param =/= TLPermissions.NtoB, \"'A' channel AcquirePerm requests NtoB\" + extra)\n") @[Monitor.scala 57:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_188), UInt<1>("h1")), 1) @[Monitor.scala 57:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_195), UInt<1>("h1")), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:58 assert (~bundle.mask === UInt(0), \"'A' channel AcquirePerm contains invalid mask\" + extra)\n") @[Monitor.scala 58:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_139), _T_195), UInt<1>("h1")), 1) @[Monitor.scala 58:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_197), _T_219), UInt<1>("h1")), "Assertion failed: 'A' channel carries Get type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:62 assert (edge.manager.supportsGetSafe(edge.address(bundle), bundle.size), \"'A' channel carries Get type unsupported by manager\" + extra)\n") @[Monitor.scala 62:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_197), _T_219), UInt<1>("h1")), 1) @[Monitor.scala 62:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_197), _T_223), UInt<1>("h1")), "Assertion failed: 'A' channel Get carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:63 assert (source_ok, \"'A' channel Get carries invalid source ID\" + extra)\n") @[Monitor.scala 63:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_197), _T_223), UInt<1>("h1")), 1) @[Monitor.scala 63:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_197), _T_227), UInt<1>("h1")), "Assertion failed: 'A' channel Get address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:64 assert (is_aligned, \"'A' channel Get address not aligned to size\" + extra)\n") @[Monitor.scala 64:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_197), _T_227), UInt<1>("h1")), 1) @[Monitor.scala 64:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_197), _T_233), UInt<1>("h1")), "Assertion failed: 'A' channel Get carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:65 assert (bundle.param === UInt(0), \"'A' channel Get carries invalid param\" + extra)\n") @[Monitor.scala 65:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_197), _T_233), UInt<1>("h1")), 1) @[Monitor.scala 65:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_197), _T_238), UInt<1>("h1")), "Assertion failed: 'A' channel Get contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:66 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Monitor.scala 66:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_197), _T_238), UInt<1>("h1")), 1) @[Monitor.scala 66:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_240), _T_262), UInt<1>("h1")), "Assertion failed: 'A' channel carries PutFull type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:70 assert (edge.manager.supportsPutFullSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutFull type unsupported by manager\" + extra)\n") @[Monitor.scala 70:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_240), _T_262), UInt<1>("h1")), 1) @[Monitor.scala 70:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_240), _T_266), UInt<1>("h1")), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:71 assert (source_ok, \"'A' channel PutFull carries invalid source ID\" + extra)\n") @[Monitor.scala 71:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_240), _T_266), UInt<1>("h1")), 1) @[Monitor.scala 71:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_240), _T_270), UInt<1>("h1")), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:72 assert (is_aligned, \"'A' channel PutFull address not aligned to size\" + extra)\n") @[Monitor.scala 72:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_240), _T_270), UInt<1>("h1")), 1) @[Monitor.scala 72:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_240), _T_276), UInt<1>("h1")), "Assertion failed: 'A' channel PutFull carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:73 assert (bundle.param === UInt(0), \"'A' channel PutFull carries invalid param\" + extra)\n") @[Monitor.scala 73:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_240), _T_276), UInt<1>("h1")), 1) @[Monitor.scala 73:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_240), _T_281), UInt<1>("h1")), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:74 assert (bundle.mask === mask, \"'A' channel PutFull contains invalid mask\" + extra)\n") @[Monitor.scala 74:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_240), _T_281), UInt<1>("h1")), 1) @[Monitor.scala 74:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_283), _T_305), UInt<1>("h1")), "Assertion failed: 'A' channel carries PutPartial type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:78 assert (edge.manager.supportsPutPartialSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutPartial type unsupported by manager\" + extra)\n") @[Monitor.scala 78:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_283), _T_305), UInt<1>("h1")), 1) @[Monitor.scala 78:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_283), _T_309), UInt<1>("h1")), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:79 assert (source_ok, \"'A' channel PutPartial carries invalid source ID\" + extra)\n") @[Monitor.scala 79:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_283), _T_309), UInt<1>("h1")), 1) @[Monitor.scala 79:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_283), _T_313), UInt<1>("h1")), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:80 assert (is_aligned, \"'A' channel PutPartial address not aligned to size\" + extra)\n") @[Monitor.scala 80:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_283), _T_313), UInt<1>("h1")), 1) @[Monitor.scala 80:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_283), _T_319), UInt<1>("h1")), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:81 assert (bundle.param === UInt(0), \"'A' channel PutPartial carries invalid param\" + extra)\n") @[Monitor.scala 81:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_283), _T_319), UInt<1>("h1")), 1) @[Monitor.scala 81:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_283), _T_327), UInt<1>("h1")), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:82 assert ((bundle.mask & ~mask) === UInt(0), \"'A' channel PutPartial contains invalid mask\" + extra)\n") @[Monitor.scala 82:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_283), _T_327), UInt<1>("h1")), 1) @[Monitor.scala 82:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_329), _T_347), UInt<1>("h1")), "Assertion failed: 'A' channel carries Arithmetic type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:86 assert (edge.manager.supportsArithmeticSafe(edge.address(bundle), bundle.size), \"'A' channel carries Arithmetic type unsupported by manager\" + extra)\n") @[Monitor.scala 86:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_329), _T_347), UInt<1>("h1")), 1) @[Monitor.scala 86:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_329), _T_351), UInt<1>("h1")), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:87 assert (source_ok, \"'A' channel Arithmetic carries invalid source ID\" + extra)\n") @[Monitor.scala 87:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_329), _T_351), UInt<1>("h1")), 1) @[Monitor.scala 87:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_329), _T_355), UInt<1>("h1")), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:88 assert (is_aligned, \"'A' channel Arithmetic address not aligned to size\" + extra)\n") @[Monitor.scala 88:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_329), _T_355), UInt<1>("h1")), 1) @[Monitor.scala 88:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_329), _T_361), UInt<1>("h1")), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:89 assert (TLAtomics.isArithmetic(bundle.param), \"'A' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Monitor.scala 89:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_329), _T_361), UInt<1>("h1")), 1) @[Monitor.scala 89:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_329), _T_366), UInt<1>("h1")), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:90 assert (bundle.mask === mask, \"'A' channel Arithmetic contains invalid mask\" + extra)\n") @[Monitor.scala 90:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_329), _T_366), UInt<1>("h1")), 1) @[Monitor.scala 90:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_368), _T_386), UInt<1>("h1")), "Assertion failed: 'A' channel carries Logical type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:94 assert (edge.manager.supportsLogicalSafe(edge.address(bundle), bundle.size), \"'A' channel carries Logical type unsupported by manager\" + extra)\n") @[Monitor.scala 94:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_368), _T_386), UInt<1>("h1")), 1) @[Monitor.scala 94:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_368), _T_390), UInt<1>("h1")), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:95 assert (source_ok, \"'A' channel Logical carries invalid source ID\" + extra)\n") @[Monitor.scala 95:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_368), _T_390), UInt<1>("h1")), 1) @[Monitor.scala 95:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_368), _T_394), UInt<1>("h1")), "Assertion failed: 'A' channel Logical address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:96 assert (is_aligned, \"'A' channel Logical address not aligned to size\" + extra)\n") @[Monitor.scala 96:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_368), _T_394), UInt<1>("h1")), 1) @[Monitor.scala 96:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_368), _T_400), UInt<1>("h1")), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:97 assert (TLAtomics.isLogical(bundle.param), \"'A' channel Logical carries invalid opcode param\" + extra)\n") @[Monitor.scala 97:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_368), _T_400), UInt<1>("h1")), 1) @[Monitor.scala 97:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_368), _T_405), UInt<1>("h1")), "Assertion failed: 'A' channel Logical contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:98 assert (bundle.mask === mask, \"'A' channel Logical contains invalid mask\" + extra)\n") @[Monitor.scala 98:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_368), _T_405), UInt<1>("h1")), 1) @[Monitor.scala 98:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_407), _T_425), UInt<1>("h1")), "Assertion failed: 'A' channel carries Hint type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:102 assert (edge.manager.supportsHintSafe(edge.address(bundle), bundle.size), \"'A' channel carries Hint type unsupported by manager\" + extra)\n") @[Monitor.scala 102:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_407), _T_425), UInt<1>("h1")), 1) @[Monitor.scala 102:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_407), _T_429), UInt<1>("h1")), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:103 assert (source_ok, \"'A' channel Hint carries invalid source ID\" + extra)\n") @[Monitor.scala 103:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_407), _T_429), UInt<1>("h1")), 1) @[Monitor.scala 103:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_407), _T_433), UInt<1>("h1")), "Assertion failed: 'A' channel Hint address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:104 assert (is_aligned, \"'A' channel Hint address not aligned to size\" + extra)\n") @[Monitor.scala 104:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_407), _T_433), UInt<1>("h1")), 1) @[Monitor.scala 104:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_407), _T_438), UInt<1>("h1")), "Assertion failed: 'A' channel Hint contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:105 assert (bundle.mask === mask, \"'A' channel Hint contains invalid mask\" + extra)\n") @[Monitor.scala 105:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_a_valid), _T_407), _T_438), UInt<1>("h1")), 1) @[Monitor.scala 105:14]
    printf(clock, and(and(and(UInt<1>("h1"), io_in_d_valid), _T_444), UInt<1>("h1")), "Assertion failed: 'D' channel has invalid opcode (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:247 assert (TLMessages.isD(bundle.opcode), \"'D' channel has invalid opcode\" + extra)\n") @[Monitor.scala 247:12]
    stop(clock, and(and(and(UInt<1>("h1"), io_in_d_valid), _T_444), UInt<1>("h1")), 1) @[Monitor.scala 247:12]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_468), _T_472), UInt<1>("h1")), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:253 assert (source_ok, \"'D' channel ReleaseAck carries invalid source ID\" + extra)\n") @[Monitor.scala 253:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_468), _T_472), UInt<1>("h1")), 1) @[Monitor.scala 253:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_468), _T_476), UInt<1>("h1")), "Assertion failed: 'D' channel ReleaseAck carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:254 assert (sink_ok, \"'D' channel ReleaseAck carries invalid sink ID\" + extra)\n") @[Monitor.scala 254:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_468), _T_476), UInt<1>("h1")), 1) @[Monitor.scala 254:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_468), _T_482), UInt<1>("h1")), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:255 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel ReleaseAck smaller than a beat\" + extra)\n") @[Monitor.scala 255:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_468), _T_482), UInt<1>("h1")), 1) @[Monitor.scala 255:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_468), _T_488), UInt<1>("h1")), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:256 assert (bundle.param === UInt(0), \"'D' channel ReleaseeAck carries invalid param\" + extra)\n") @[Monitor.scala 256:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_468), _T_488), UInt<1>("h1")), 1) @[Monitor.scala 256:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_490), _T_494), UInt<1>("h1")), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:260 assert (source_ok, \"'D' channel Grant carries invalid source ID\" + extra)\n") @[Monitor.scala 260:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_490), _T_494), UInt<1>("h1")), 1) @[Monitor.scala 260:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_490), _T_498), UInt<1>("h1")), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:261 assert (sink_ok, \"'D' channel Grant carries invalid sink ID\" + extra)\n") @[Monitor.scala 261:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_490), _T_498), UInt<1>("h1")), 1) @[Monitor.scala 261:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_490), _T_504), UInt<1>("h1")), "Assertion failed: 'D' channel Grant smaller than a beat (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:262 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel Grant smaller than a beat\" + extra)\n") @[Monitor.scala 262:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_490), _T_504), UInt<1>("h1")), 1) @[Monitor.scala 262:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_490), _T_510), UInt<1>("h1")), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:263 assert (TLPermissions.isCap(bundle.param), \"'D' channel Grant carries invalid cap param\" + extra)\n") @[Monitor.scala 263:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_490), _T_510), UInt<1>("h1")), 1) @[Monitor.scala 263:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_512), _T_516), UInt<1>("h1")), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:267 assert (source_ok, \"'D' channel GrantData carries invalid source ID\" + extra)\n") @[Monitor.scala 267:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_512), _T_516), UInt<1>("h1")), 1) @[Monitor.scala 267:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_512), _T_520), UInt<1>("h1")), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:268 assert (sink_ok, \"'D' channel GrantData carries invalid sink ID\" + extra)\n") @[Monitor.scala 268:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_512), _T_520), UInt<1>("h1")), 1) @[Monitor.scala 268:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_512), _T_526), UInt<1>("h1")), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:269 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel GrantData smaller than a beat\" + extra)\n") @[Monitor.scala 269:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_512), _T_526), UInt<1>("h1")), 1) @[Monitor.scala 269:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_512), _T_532), UInt<1>("h1")), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:270 assert (TLPermissions.isCap(bundle.param), \"'D' channel GrantData carries invalid cap param\" + extra)\n") @[Monitor.scala 270:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_512), _T_532), UInt<1>("h1")), 1) @[Monitor.scala 270:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_534), _T_538), UInt<1>("h1")), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:274 assert (source_ok, \"'D' channel AccessAck carries invalid source ID\" + extra)\n") @[Monitor.scala 274:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_534), _T_538), UInt<1>("h1")), 1) @[Monitor.scala 274:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_534), _T_542), UInt<1>("h1")), "Assertion failed: 'D' channel AccessAck carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:275 assert (sink_ok, \"'D' channel AccessAck carries invalid sink ID\" + extra)\n") @[Monitor.scala 275:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_534), _T_542), UInt<1>("h1")), 1) @[Monitor.scala 275:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_534), _T_548), UInt<1>("h1")), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:277 assert (bundle.param === UInt(0), \"'D' channel AccessAck carries invalid param\" + extra)\n") @[Monitor.scala 277:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_534), _T_548), UInt<1>("h1")), 1) @[Monitor.scala 277:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_550), _T_554), UInt<1>("h1")), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:281 assert (source_ok, \"'D' channel AccessAckData carries invalid source ID\" + extra)\n") @[Monitor.scala 281:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_550), _T_554), UInt<1>("h1")), 1) @[Monitor.scala 281:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_550), _T_558), UInt<1>("h1")), "Assertion failed: 'D' channel AccessAckData carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:282 assert (sink_ok, \"'D' channel AccessAckData carries invalid sink ID\" + extra)\n") @[Monitor.scala 282:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_550), _T_558), UInt<1>("h1")), 1) @[Monitor.scala 282:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_550), _T_564), UInt<1>("h1")), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:284 assert (bundle.param === UInt(0), \"'D' channel AccessAckData carries invalid param\" + extra)\n") @[Monitor.scala 284:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_550), _T_564), UInt<1>("h1")), 1) @[Monitor.scala 284:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_566), _T_570), UInt<1>("h1")), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:288 assert (source_ok, \"'D' channel HintAck carries invalid source ID\" + extra)\n") @[Monitor.scala 288:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_566), _T_570), UInt<1>("h1")), 1) @[Monitor.scala 288:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_566), _T_574), UInt<1>("h1")), "Assertion failed: 'D' channel HintAck carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:289 assert (sink_ok, \"'D' channel HintAck carries invalid sink ID\" + extra)\n") @[Monitor.scala 289:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_566), _T_574), UInt<1>("h1")), 1) @[Monitor.scala 289:14]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_566), _T_580), UInt<1>("h1")), "Assertion failed: 'D' channel HintAck carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:291 assert (bundle.param === UInt(0), \"'D' channel HintAck carries invalid param\" + extra)\n") @[Monitor.scala 291:14]
    stop(clock, and(and(and(and(UInt<1>("h1"), io_in_d_valid), _T_566), _T_580), UInt<1>("h1")), 1) @[Monitor.scala 291:14]
    printf(clock, and(and(UInt<1>("h1"), _T_586), UInt<1>("h1")), "Assertion failed: 'B' channel valid and not TL-C (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:308 assert (!bundle.b.valid, \"'B' channel valid and not TL-C\" + extra)\n") @[Monitor.scala 308:14]
    stop(clock, and(and(UInt<1>("h1"), _T_586), UInt<1>("h1")), 1) @[Monitor.scala 308:14]
    printf(clock, and(and(UInt<1>("h1"), _T_592), UInt<1>("h1")), "Assertion failed: 'C' channel valid and not TL-C (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:309 assert (!bundle.c.valid, \"'C' channel valid and not TL-C\" + extra)\n") @[Monitor.scala 309:14]
    stop(clock, and(and(UInt<1>("h1"), _T_592), UInt<1>("h1")), 1) @[Monitor.scala 309:14]
    printf(clock, and(and(UInt<1>("h1"), _T_598), UInt<1>("h1")), "Assertion failed: 'E' channel valid and not TL-C (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:310 assert (!bundle.e.valid, \"'E' channel valid and not TL-C\" + extra)\n") @[Monitor.scala 310:14]
    stop(clock, and(and(UInt<1>("h1"), _T_598), UInt<1>("h1")), 1) @[Monitor.scala 310:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_641), _T_646), UInt<1>("h1")), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:322 assert (a.bits.opcode === opcode, \"'A' channel opcode changed within multibeat operation\" + extra)\n") @[Monitor.scala 322:14]
    stop(clock, and(and(and(UInt<1>("h1"), _T_641), _T_646), UInt<1>("h1")), 1) @[Monitor.scala 322:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_641), _T_651), UInt<1>("h1")), "Assertion failed: 'A' channel param changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:323 assert (a.bits.param  === param,  \"'A' channel param changed within multibeat operation\" + extra)\n") @[Monitor.scala 323:14]
    stop(clock, and(and(and(UInt<1>("h1"), _T_641), _T_651), UInt<1>("h1")), 1) @[Monitor.scala 323:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_641), _T_656), UInt<1>("h1")), "Assertion failed: 'A' channel size changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:324 assert (a.bits.size   === size,   \"'A' channel size changed within multibeat operation\" + extra)\n") @[Monitor.scala 324:14]
    stop(clock, and(and(and(UInt<1>("h1"), _T_641), _T_656), UInt<1>("h1")), 1) @[Monitor.scala 324:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_641), _T_661), UInt<1>("h1")), "Assertion failed: 'A' channel source changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:325 assert (a.bits.source === source, \"'A' channel source changed within multibeat operation\" + extra)\n") @[Monitor.scala 325:14]
    stop(clock, and(and(and(UInt<1>("h1"), _T_641), _T_661), UInt<1>("h1")), 1) @[Monitor.scala 325:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_641), _T_666), UInt<1>("h1")), "Assertion failed: 'A' channel address changed with multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:326 assert (a.bits.address=== address,\"'A' channel address changed with multibeat operation\" + extra)\n") @[Monitor.scala 326:14]
    stop(clock, and(and(and(UInt<1>("h1"), _T_641), _T_666), UInt<1>("h1")), 1) @[Monitor.scala 326:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_712), _T_717), UInt<1>("h1")), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:394 assert (d.bits.opcode === opcode, \"'D' channel opcode changed within multibeat operation\" + extra)\n") @[Monitor.scala 394:14]
    stop(clock, and(and(and(UInt<1>("h1"), _T_712), _T_717), UInt<1>("h1")), 1) @[Monitor.scala 394:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_712), _T_722), UInt<1>("h1")), "Assertion failed: 'D' channel param changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:395 assert (d.bits.param  === param,  \"'D' channel param changed within multibeat operation\" + extra)\n") @[Monitor.scala 395:14]
    stop(clock, and(and(and(UInt<1>("h1"), _T_712), _T_722), UInt<1>("h1")), 1) @[Monitor.scala 395:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_712), _T_727), UInt<1>("h1")), "Assertion failed: 'D' channel size changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:396 assert (d.bits.size   === size,   \"'D' channel size changed within multibeat operation\" + extra)\n") @[Monitor.scala 396:14]
    stop(clock, and(and(and(UInt<1>("h1"), _T_712), _T_727), UInt<1>("h1")), 1) @[Monitor.scala 396:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_712), _T_732), UInt<1>("h1")), "Assertion failed: 'D' channel source changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:397 assert (d.bits.source === source, \"'D' channel source changed within multibeat operation\" + extra)\n") @[Monitor.scala 397:14]
    stop(clock, and(and(and(UInt<1>("h1"), _T_712), _T_732), UInt<1>("h1")), 1) @[Monitor.scala 397:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_712), _T_737), UInt<1>("h1")), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:398 assert (d.bits.sink   === sink,   \"'D' channel sink changed with multibeat operation\" + extra)\n") @[Monitor.scala 398:14]
    stop(clock, and(and(and(UInt<1>("h1"), _T_712), _T_737), UInt<1>("h1")), 1) @[Monitor.scala 398:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_712), _T_744), UInt<1>("h1")), "Assertion failed: 'D' channel burst lowered error (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:399 assert (d.bits.error || !error,   \"'D' channel burst lowered error\" + extra)\n") @[Monitor.scala 399:14]
    stop(clock, and(and(and(UInt<1>("h1"), _T_712), _T_744), UInt<1>("h1")), 1) @[Monitor.scala 399:14]
    printf(clock, and(and(and(UInt<1>("h1"), _T_814), _T_824), UInt<1>("h1")), "Assertion failed: 'A' channel re-used a source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:428 assert(!inflight(bundle.a.bits.source), \"'A' channel re-used a source ID\" + extra)\n") @[Monitor.scala 428:13]
    stop(clock, and(and(and(UInt<1>("h1"), _T_814), _T_824), UInt<1>("h1")), 1) @[Monitor.scala 428:13]
    printf(clock, and(and(and(UInt<1>("h1"), _T_836), _T_845), UInt<1>("h1")), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:435 assert((a_set | inflight)(bundle.d.bits.source), \"'D' channel acknowledged for nothing inflight\" + extra)\n") @[Monitor.scala 435:13]
    stop(clock, and(and(and(UInt<1>("h1"), _T_836), _T_845), UInt<1>("h1")), 1) @[Monitor.scala 435:13]
    printf(clock, and(and(UInt<1>("h1"), _T_864), UInt<1>("h1")), "Assertion failed: TileLink timeout expired (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:447 assert (!inflight.orR || limit === UInt(0) || watchdog < limit, \"TileLink timeout expired\" + extra)\n") @[Monitor.scala 447:12]
    stop(clock, and(and(UInt<1>("h1"), _T_864), UInt<1>("h1")), 1) @[Monitor.scala 447:12]

  module DummyPlusArgReader_75 :
    input clock : Clock
    input reset : UInt<1>
    output io_out : UInt<32>

    io_out <= UInt<1>("h0") @[PlusArg.scala 19:16]
