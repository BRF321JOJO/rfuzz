// Copyright 2018, Kevin Laeufer <laeufer@cs.berkeley.edu>

// this module contains code to load the fuzz configuration TOML
// which is generated by the FIRRTL instrumentation pass
// (and potentially extended/modified by hand)

extern crate toml;

use std::collections::BTreeMap;
use config::toml::value::Datetime;
use std::fs::File;
use std::io::prelude::*;

pub fn load_from_file(filename: &str) {
	let mut file = File::open(filename).expect("failed to open config");
	let mut contents = String::new();
	file.read_to_string(&mut contents).expect("failed to read config");
	let test: Test = toml::from_str(&contents).unwrap();
	println!("{:?}", test);
}

#[derive(Debug, Deserialize)]
struct General {
	filename: String,
	instrumented: String,
	module: String,
	timestamp: Datetime
}
#[derive(Debug, Deserialize)]
struct Coverage {
	name: String,
	inverted: bool,
	index: u64,
	counterbits: u64,
	filename: String,
	line: u64,
	column: u64,
	human: String,
}

#[derive(Debug, Deserialize)]
struct Test {
	general: General,
	coverage: Vec<Coverage>,
	input: BTreeMap<String, u64>,
}
